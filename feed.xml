<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zen M-4 : Zen Metaphor</title>
    <description>Comprendre le dev Web par des métaphores.
</description>
    <link>http://zenm4.net/</link>
    <atom:link href="http://zenm4.net/feed.xml" rel="self" type="application/rss+xml"/>
    <language>fr-fr</language>
    <copyright>&#169; Sylvain Abélard</copyright>
    <itunes:subtitle>Chaque semaine une image simple pour comprendre quelque chose qui n&#39;aurait jamais dû être compliqué dans le développement informatique.</itunes:subtitle>
    <itunes:author>Sylvain Abélard</itunes:author>
    <itunes:summary>Chaque semaine une image simple pour comprendre quelque chose qui n&#39;aurait jamais dû être compliqué dans le développement informatique.</itunes:summary>
    <itunes:owner>
      <itunes:name>Sylvain Abélard</itunes:name>
      <itunes:email>sylvain.abelard+zenm4@gmail.com</itunes:email>
    </itunes:owner>
    <itunes:image href="http://zenm4.net/img/zenm4_big.jpg" />
    <itunes:category text="Technology" />
    <itunes:explicit>no</itunes:explicit>
    <pubDate>Tue, 19 Apr 2016 10:16:25 +0200</pubDate>
    <lastBuildDate>Tue, 19 Apr 2016 10:16:25 +0200</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Git, ou l&#39;écriture à N cerveaux</title>
        <description>&lt;p&gt;Bonjour, bienvenue dans l’épisode 12 sur Git.&lt;/p&gt;

&lt;p&gt;Beaucoup de cours pour apprendre à coder se basent sur Git,
et c’est très bien de viser tout de suite une bonne pratique
qui ne va jamais cesser d’être utile. En plus, un code bien
versionné c’est le droit de faire des erreurs et revenir en
arrière, ce qui est parfait pour se rassurer quand on tente
des choses nouvelles.&lt;/p&gt;

&lt;p&gt;Mais cela bloque aussi les débutants : je voulais “juste”
apprendre à coder, et voilà qu’on me gave d’outils annexes
sans vraiment me dire pourquoi ils sont là, si on peut
s’en passer au début, ou si on peut apprendre juste quelques
parties et se lancer, ou qu’on doit tout savoir dès le début.&lt;/p&gt;

&lt;p&gt;Du coup le but ici n’est pas de vous faire une liste des commandes
(j’ai essayé avec l’épisode sur les itérateurs, c’est beaucoup trop
long et pas forcément adapté en podcast, et en plus il y a déjà
pléthore de sites et docs très bien faits) mais encore une fois de
donner une vue d’ensemble pour dédramatiser le sujet.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;La tradition orale&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;J’aimerais rapprocher l’écriture de code (du texte à la base),
avec quelque chose que l’humanité fait depuis très longtemps :
raconter des histoires.&lt;/p&gt;

&lt;p&gt;Dans toutes les cultures, mythes, légendes, contes se transmettent
par tradition orale : les griots, les druides, les aedes grecs…
et un jour tout cela se cristallise dans un ouvrage : l’épopée de
Gilgamesh ou l’Iliade et l’Odyssée, etc.&lt;/p&gt;

&lt;p&gt;Comme dans le logiciel ou le business, l’écriture dans une version
“canonique” n’empêche pas les reprises, redécouvertes ou réinventions :
Molière a repris énormément d’idées de ses fables chez Esope,
pourtant il a écrit quelque chose d’original en l’adaptant à sa
langue et à son époque.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pourquoi versionner ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On souhaite avoir plusieurs versions d’un logiciel qu’on écrit : soit
parce qu’on travaille à plusieurs, soit pour faire une expérience par
ci, une tentative par là, sans que cela ne bloque tout le monde.&lt;/p&gt;

&lt;p&gt;Vous avez tenté quelque chose de trop courageux toute la journée
de mardi ? Rien ne marche le soir ? Pas de souci : on revient à
la version de lundi.&lt;/p&gt;

&lt;p&gt;Quand on commence un long chantier sur son code, on ne veut pas le
mettre en prod tant qu’il n’est pas fini, pourtant il faut bien que le
logiciel avance : une urgence, un patch de sécurité, et on doit soit
reprendre la version d’avant votre chantier, soit mettre en prod
quelque chose qui n’est pas maîtrisé.&lt;/p&gt;

&lt;p&gt;Une façon simple de faire ça était de tout copier-coller dans des
dossiers, avec des noms plus ou moins explicites (v1, v2, backup, test…)
mais plus on va mener de chantiers en parallèle plus ça va être
difficile, déjà de tracer, mais ensuite de remettre ensemble à la
fin quand le résultat est satisfaisant et “mérite” de rentrer dans
le produit final.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Les conflits&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Bien entendu, ça arrive tout le temps. Parfois, pour avancer,
on doit se baser sur une hypothèse différente :
pour le métier, une découverte qui n’était pas dans le plan de base,
une contrainte légale ou une opportunité business ;
pour les développeurs, des contraintes ou opportunités techniques.&lt;/p&gt;

&lt;p&gt;Votre code et votre base de données peuvent avoir des changements
majeurs qui mettent une partie du système KO.
Quand ça arrive, votre code est en conflit avec celui du voisin.&lt;/p&gt;

&lt;p&gt;Par exemple, dans l’histoire du barde voisin, le personnage
principal meurt, c’est bien plus dramatique, mais vous en aviez
besoin dans la scène finale que vous aviez enjolivée : l’un des
deux aspects va devoir changer, quitte à faire deux ouvrages.&lt;/p&gt;

&lt;p&gt;Quand ça n’arrive pas ou très rarement… soit votre projet ne
change plus (pas toujours bon signe) soit vous aviez une excellente
conception ou architecture logicielle (souvent le genre de choses
dont on se rend compte avec beaucoup d’expérience, ou a posteriori).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Gestion de version, distribuée&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Typiquement les versions des contes de Grimm finissent mal et les
Disney finissent bien : je ne dis pas que l’un ou l’autre a raison,
ils ont chacun leur public, leur époque, leur succès, et sont tous
les deux dépositaires d’une version qui est stable et se suffit à elle-même.&lt;/p&gt;

&lt;p&gt;Chez les développeurs, ce serait un fork du logiciel, et chacun vivra
sa vie complètement séparée de l’autre. On ne remet plus trop de Grimm
dans les Disney, l’inverse à la rigueur ?&lt;/p&gt;

&lt;p&gt;Ça peut être un changement de version majeure de la 1.0 à la 2.0,
ou deux branches de la même histoire qui coexistent.&lt;/p&gt;

&lt;p&gt;Mais des scénaristes qui travaillent en parallèle ?
Tout simplement sont deux dépôts du même code, qui ont vocation
à fusionner un jour en reprenant le meilleur de chaque.
Régulièrement, ils s’envoient ou ils vont chercher les modifications
de l’autre.&lt;/p&gt;

&lt;p&gt;Git est prévu pour ça, pour s’échanger les différences pour que
chacun puisse profiter des améliorations de l’autre, à condition
d’être prêt à résoudre les conflits.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Dépôt, branche, versions, table de travail&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Du coup, Git propose énormément de commandes en fonction des
subtilités choisies : cloner, envoyer, récupérer les dépôts ;
expérimenter et naviguer entre plusieurs branches des possibles ;
voir l’état de votre table de travail, jeter les brouillons
ou intégrer les nouveaux travaux à telle ou telle branche ;
fusionner les modifications.&lt;/p&gt;

&lt;p&gt;Enfin, parfois, vous voulez présenter non seulement votre travail à
quelqu’un, mais qu’il ne voie pas les annotations et modifications
successives : on peut alors réécrire l’histoire des commits.&lt;/p&gt;

&lt;p&gt;Là encore, ça n’est pas une opération quotidienne ou anodine :
maîtrisez d’abord la base et vous saurez par la suite si vous voulez
vraiment le faire, et armé de la pratique git que vous aurez eu
entretemps, la méthode vous semblera plus claire.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Le distribué centralisé&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;C’est compliqué d’imaginer que chacun a sa version.
De toutes façon, un seul logiciel finira en production dans votre entreprise.
Souvent, on va se dire qu’un des dépôts a autorité sur les autres,
disons celui de l’entreprise ou du projet et pas celui des contributeurs.
Au lieu de vous synchroniser avec chacun de vos collègues, vous le ferez via celui-ci.&lt;/p&gt;

&lt;p&gt;Git est si populaire que de nombreux outils de développement se basent dessus :
l’intégration continue par exemple, permet de dire “quand une nouvelle
version est envoyée à tel endroit, lance des tests,
et s’ils réussissent, déploie le tout en production”.
Confort maximum, gain de temps : bel exemple d’automatisation.&lt;/p&gt;

&lt;p&gt;Il existe aussi de nombreuses plateformes, publiques ou privées.
GitHub étant devenu de fait un hébergeur majeur de projets Open Source,
il y a de fortes chances que toutes les briques dont votre projet a besoin
pour fonctionner soient sur GitHub. Si vous avez un outil de gestion de
dépendances (npm pour Node, gem pour Ruby par exemple), il y a de fortes
chances pour qu’il aille tout chercher sur GitHub.&lt;/p&gt;

&lt;p&gt;Du coup, bien que Git soit conçu pour être un système distribué,
vous venez de baser un système qui se centralise sur GitHub, et
en cas de problème chez eux, votre projet est affecté aussi.&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Écrire et versionner son code source sous Git c'est comme l&#39;écriture des contes et la tradition orale
	</itunes:subtitle>
	<itunes:summary>
	  Écrire et versionner son code source sous Git c'est comme l&#39;écriture des contes et la tradition orale
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/sunset.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/259529834-zenm4-012-zen-metaphor-git-ou-lecriture-a-plusieurs-cerveaux.m4a" length="46000" type="audio/mp4" />
	<itunes:duration>7:40</itunes:duration>

        <pubDate>Sun, 17 Apr 2016 15:45:00 +0200</pubDate>
        <link>http://zenm4.net/012/</link>
        <guid isPermaLink="true">http://zenm4.net/012/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>À l&#39;attaque !</title>
        <description>&lt;p&gt;Récemment à ParisRB, nous avons eu des présentations sur la sécurité.
&lt;a href=&quot;https://twitter.com/@DorianLupu&quot;&gt;Dorian&lt;/a&gt; et
&lt;a href=&quot;https://twitter.com/@jbaviat&quot;&gt;Jean-Baptiste&lt;/a&gt;
se sont gentiment proposer de continuer avec une série régulière.&lt;/p&gt;

&lt;p&gt;Tout d’abord je rappelle aux curieux que nous réussissons depuis
janvier à transmettre les meetups en live sur la chaîne YouTube
&lt;a href=&quot;https://www.youtube.com/channel/UCttFnyoHp4TdsTj1wcVs44A&quot;&gt;ParisRB&lt;/a&gt;
et que nous avons un
&lt;a href=&quot;http://parisrb-slack-invite.herokuapp.com/&quot;&gt;Slack&lt;/a&gt;
qui vous permet de réagir durant l’événement et poser des questions.&lt;/p&gt;

&lt;p&gt;La sécurité c’est bien joli mais il est difficile de comprendre
pourquoi un code javascript &lt;code class=&quot;highlighter-rouge&quot;&gt;alert(&#39;pwn3d!&#39;)&lt;/code&gt; est une faille.&lt;/p&gt;

&lt;p&gt;Plus que jamais je ne suis pas un expert mais je vise à vulgariser
et démystifier ces sujets : je ne suis pas un dentiste, mais je peux
quand même vous expliquer comment vous brosser les dents.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Acceptez les difficultés&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Car au niveau de la plupart des développeurs, c’est bien de ça
qu’il s’agit : une forme d’hygiène. Avec les bonnes habitudes,
et dans une équipe un peu complète, on évite un maximum de problèmes.
Dans les cas rares où vous avez des besoins très précis,
vous serez au courant avant et vous prendrez vos dispositions.&lt;/p&gt;

&lt;p&gt;Le monde de la sécurité peut rebuter pour plusieurs aspects.
Tout d’abord ça fait peur, et plus que tout autre domaine on a
peur de ne jamais être à la hauteur : le sujet est vaste, plein
de jargon et de technicité, et comme dans le jeu des gendarmes
et des voleurs c’est un jeu d’attaques et contre-attaques, et
on a toujours l’impression d’avoir une étape de retard.&lt;/p&gt;

&lt;p&gt;Ça fait aussi de vous quelqu’un d’extrêmement parano, jusque
dans la vraie vie. Et pire, comme “la sécurité d’une chaîne
est celle de son maillon le plus faible”, et personne ne veut
être le maillon faible.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;L’approche par le risque&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Là encore j’ai a priori de quoi faire un épisode complet sur chaque
type de faille, mais on va commencer par des généralités.
Parlons de la sécurité de votre habitation, et désolé si ça vous
empêche de dormir ce soir :)&lt;/p&gt;

&lt;p&gt;Le premier postulat c’est que tout change et rien n’est certain :
“le risque zéro n’existe pas”. On va protéger sa maison contre les
cambrioleurs, mais pas contre une attaque au camion bélier ou au
lance-roquettes. Les banques et data-centers, eux, peuvent et
devraient s’en inquiéter.&lt;/p&gt;

&lt;p&gt;L’idée est dissuader l’attaquant avant même qu’il tente de rentrer
chez vous : trop long, trop compliqué, pour des gains incertains.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Analyse de comportements&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Des études disent qu’une bonne porte et de bonnes fenêtres font
fuir la majorité des cambrioleurs : plus le temps passe et plus
ils font de bruit, plus ils ont de chances que vous reveniez,
ou qu’un passant les remarque.&lt;/p&gt;

&lt;p&gt;Avec cette approche, une des clés de votre système, ce n’est pas
d’être totalement imperméable, mais que toute attaque soit aussi
difficile, et longue, et bruyante que possible.&lt;/p&gt;

&lt;p&gt;C’est comme avoir des caméras de surveillance : ça n’empêche pas
le crime d’avoir lieu, mais ça augmente les chances de détection
et de retrouver des traces pour punir le coupable.
Aucune protection, mais de la dissuasion.&lt;/p&gt;

&lt;p&gt;Dans vos systèmes, en tant que développeur, vous êtes de toutes façons
déjà parti pour tout tracer et analyser : pour votre reporting,
votre chef, votre curiosité, votre business, avoir des idées de ce qui
est important et ce qui l’est moins…&lt;/p&gt;

&lt;p&gt;Il suffit de rajouter l’aspect sécurité à cette question : qu’est-ce
qui consitue un comportement normal, et qu’est-ce qui sort de la norme ?
Mettez en place un système d’analyse et d’alerte, vous ne serez jamais
déçus d’être prévenu d’une situation anormale : appli cassée, serveur KO,
réseau coupé… et intrusion en cours.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et tant pis pour le voisin !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On dit parfois que si vous êtes dans un groupe poursuivi par un lion affamé,
il n’y a pas besoin de courir plus vite que le lion, mais plus vite que la
personne la plus lente du groupe.&lt;/p&gt;

&lt;p&gt;C’est pareil : si votre porte ou votre site ne sont pas ultra sécurisés,
on souhaite au moins qu’ils soient plus difficiles à pirater que celui du
voisin. On suppose les attaquants ne sont pas totalement idiots et se
reporteront sur la cible la plus facile.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Le coût total&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Tout cela coûte de l’argent à mettre en place et à regarder en permanence.
Il y a de nouveau un équilibre à trouver entre la prévention, la réaction
(qu’est-ce que ça vous coûte de couper puis de réparer), et ce qu’une attaque
vous aura coûté entretemps en business perdu.&lt;/p&gt;

&lt;p&gt;Dans la vraie vie on peut tout à fait mettre des assurances, vous en avez
une sur votre logement, et sur votre business, que vous négociez en fonction
de votre budget, des risques et des coûts.&lt;/p&gt;

&lt;p&gt;Bon, ça remplit déjà un épisode, on verra plus tard pour l’explication
des méthodes elles-mêmes comme les injections.
J’imagine que vous avez de quoi réfléchir, et que vous ne serez pas surpris
d’apprendre que la plupart des fans de sécurité que je connais sont aussi
très intéressés par la sécurité physique des locaux, et notamment les serrures.&lt;/p&gt;

&lt;p&gt;Dormez bien !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  La sécurité numérique face à une attaque c'est comme la sécurité physique : probabilité, détection, coût total
	</itunes:subtitle>
	<itunes:summary>
	  La sécurité numérique face à une attaque c'est comme la sécurité physique : probabilité, détection, coût total
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/maze.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/258353685-zenm4-011-zen-metaphor-a-lattaque.m4a" length="43700" type="audio/mp4" />
	<itunes:duration>7:17</itunes:duration>

        <pubDate>Sun, 10 Apr 2016 15:45:00 +0200</pubDate>
        <link>http://zenm4.net/011/</link>
        <guid isPermaLink="true">http://zenm4.net/011/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Itérations</title>
        <description>&lt;p&gt;Épisode 10 sur des traitements classiques sur les listes.
En Ruby on appelle ça Enumerable, mais heureusement les mots
sont partagés dans la plupart des bibliothèques et langages.&lt;/p&gt;

&lt;p&gt;Traitons d’abord quelques oublis classiques de débutants
(et d’étourderies d’experts aussi, ne vous sentez pas ridicules
quand ça vous arrive, c’est le jeu) sur des listes et “boucles”.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; et les itérations&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Imaginez-vous dans un emploi qui traite des dossiers un par un.
Votre méthode de travail est de prendre des fiches, et les traiter.
Partons sur un tableau nommé &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; et contenant les chiffres de 1 à 5.
&lt;code class=&quot;highlighter-rouge&quot;&gt;a = [1,2,3,4,5] # ou (1..5).to_a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Traiter, ça peut vouloir dire prendre une feuille, noter quelque
chose ailleurs, et les remettre exactement à leur place.
C’est ce que fait &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; : le code &lt;code class=&quot;highlighter-rouge&quot;&gt;b = a.each{|x| x * 2}&lt;/code&gt;
met effectivement un tableau dans &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, mais &lt;code class=&quot;highlighter-rouge&quot;&gt;[1,2,3,4,5]&lt;/code&gt;
et non pas &lt;code class=&quot;highlighter-rouge&quot;&gt;[2,4,6,8,10]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; et les pièges sémantiques&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Traiter, ça peut vouloir dire prendre un dossier &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;,
ouvrir un nouveau dossier vierge, et mettre dans ce nouveau
dossier le résultat de votre travail.&lt;/p&gt;

&lt;p&gt;Le piège, c’est qu’après vous pouvez tout aussi bien mettre
une nouvelle étiquette &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; sur ce nouveau dossier, ou
voler l’étiquette du dossier &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; pour la coller sur ce
nouveau dossier.&lt;/p&gt;

&lt;p&gt;Pire encore, vous pouvez travailler soit avec des photocopies
de chacune des feuilles de &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, soit modifier physiquement
chacune des feuilles : vous avez mis du surligneur, déchiré
un coupon, écrit sur la fiche ou mis un tampon ?
Impossible de retrouver la feuille de départ dans l’état de départ !&lt;/p&gt;

&lt;p&gt;En terme de code, ces trois options donneraient cela :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b = a.map {|x| x * 2}&lt;/code&gt;, qui renvoie bien &lt;code class=&quot;highlighter-rouge&quot;&gt;[2,4,6,8,10]&lt;/code&gt;
et le stocke dans &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, sans aucunement déranger le tableau &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a = a.map {|x| x * 2}&lt;/code&gt; a travaillé sur une copie de &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;
(sans la nommer) puis finit par lui recoller l’étiquette &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; dessus.
On ne parle pas des informations de départ : en ayant redonné
l’étiquette au nouveau dossier, on n’a pas vraiment prévu de moyen
d’aller chercher les anciennes informations.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[&#39;bonjour&#39;, &#39;au revoir&#39;].map{|x| x.upcase!}&lt;/code&gt; a vraiment modifié
le contenu, chacune des chaînes de caractères du tableau.
On note d’ailleurs que par convention, les Rubyistes mettront un
point d’exclamation à la fin des noms de méthodes “destructrices”,
c’est à dire qui changent le contenu de départ.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;str = &quot;Bonjour&quot; # =&amp;gt; &quot;Bonjour&quot;   # valeur de départ
str.upcase      # =&amp;gt; &quot;BONJOUR&quot;   # ça n&#39;est pas la même donnée
str             # =&amp;gt; &quot;Bonjour&quot;   # on n&#39;a pas touché à str
str.upcase!     # =&amp;gt; &quot;BONJOUR&quot;   # on a mis en majuscule et on altère str
str             # =&amp;gt; &quot;BONJOUR&quot;   # str a été modifiée
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Traitement “en place”&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Pareillement pour les dossiers, si je veux trier mon dossier &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;
je n’ai pas forcément envie de préparer un nouveau dossier pour
conserver les valeurs triées, et jouer ensuite avec les étiquettes.&lt;/p&gt;

&lt;p&gt;Je peux vouloir simplement dire que tout se fait dans le tableau &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;
et que je n’ai pas besoin de faire de copies. Ça s’appelle un
traitement “in-place” et la plupart des rubyistes vont le faire
avec des méthodes finissant par des points d’exclamation.&lt;/p&gt;

&lt;p&gt;On n’en voit pas dans &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt;, mais on voit beaucoup de paires
dans la classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;sort!&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rotate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;uniq&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;&lt;b&gt;D’une liste à un seul résultat&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Je pense qu’il faudra un autre épisode pour toutes ces super fonctions.
En attendant, il y a une classe entière de besoins à voir.&lt;/p&gt;

&lt;p&gt;Imaginez que votre travail c’est de prendre une liste de fiches,
et de ressortir un seul nombre : la somme des paiements,
ou le nombre de mauvais payeurs par exemple.&lt;/p&gt;

&lt;p&gt;Cette méthode a trois noms.
Ruby l’appelle &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; : on “réduit” les N fiches à 1 résultat.&lt;/p&gt;

&lt;p&gt;Ruby l’appelle aussi &lt;code class=&quot;highlighter-rouge&quot;&gt;inject&lt;/code&gt; : on “injecte” la valeur zéro,
puis on va regarder chaque fiche pour ajouter la somme d’argent
de LA fiche au total “temporaire” et ainsi de suite.
Par exemple, 50 + 100 + 25 + 20 + 5 : vous avez probablement fait
l’addition étape par étape.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[50, 100, 25, 20, 5].inject(0) {|somme, obj| somme + obj}
[100, 25, 20, 5].inject(50) {|somme, obj| somme + obj}
[25, 20, 5].inject(150) {|somme, obj| somme + obj}
[20, 5].inject(175) {|somme, obj| somme + obj}
[5].inject(195) {|somme, obj| somme + obj}
# =&amp;gt; 200
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Le troisième nom n’est pas très utilisé en Ruby, mais dans le reste
des langages : &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;. Il applique le résultat étape par étape, comme
on vient de voir.
J’aime bien l’image que ce mot donne : si vous avez déjà vu de vieilles
imprimantes avec des piles de papier qui se pliaient et dépliaient,
c’est vraiment pour moi l’acte de replier une très longue liste de
pages en un accordéon qui prend moins de place et affiche en bas
le résultat voulu.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;That’s all folks!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Et bien voilà, c’est déjà assez long pour cette fois !
Mon but n’est pas franchement de vous lire la doc Ruby à
voix haute, donc allez lire
&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Enumerable.html&quot;&gt;Enumerable&lt;/a&gt;,
&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Array.html&quot;&gt;Array&lt;/a&gt;,
&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Hash.html&quot;&gt;Hash&lt;/a&gt;,
et aussi &lt;a href=&quot;http://ruby-doc.org/core-2.3.0/String.html&quot;&gt;String&lt;/a&gt;,
les opérations sur les chaînes de caractères, pour faire bonne mesure,
mais peut-être que je ferai un épisode “rappel” sur quelques-unes de
ces méthodes un de ces jours.&lt;/p&gt;

</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Les méthodes each, map, inject c'est comme prendre des feuilles pour lire et remettre, changer, agréger
	</itunes:subtitle>
	<itunes:summary>
	  Les méthodes each, map, inject c'est comme prendre des feuilles pour lire et remettre, changer, agréger
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/gong.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/-zenm4-010-zen-metaphor-iterations.m4a" length="44300" type="audio/mp4" />
	<itunes:duration>7:23</itunes:duration>

        <pubDate>Sun, 27 Mar 2016 15:45:00 +0200</pubDate>
        <link>http://zenm4.net/010/</link>
        <guid isPermaLink="true">http://zenm4.net/010/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Indexation</title>
        <description>&lt;p&gt;Bonjour, bienvenue dans cet épisode 9 sur l’indexation dans les bases
de données. C’était l’étape logique juste après l’épisode 8 sur la
manière de ranger et rechercher des données.&lt;/p&gt;

&lt;p&gt;On parlait dans l’épisode précédent de ranger des livres, et d’aller
les chercher. Les seuls outils pour cela étaient un ensemble d’étagères
et quelques règles non écrites. J’aime bien chercher les règles non
écrites : c’est ce qui permet de tout clarifier, et parfois de tout
remettre en cause pour créer de nouvelles opportunités.&lt;/p&gt;

&lt;p&gt;1) On voulait donner un ordre, mais lequel ? On supposait que la
personne qui range ses livres ne se pose pas la question, ou plutôt
qu’elle a une réponse toute faite : probablement de haut en bas du
meuble, de gauche à droite par étagère.&lt;/p&gt;

&lt;p&gt;Si c’est vous qui savez, qui rangez et qui cherchez, ça marche, mais
bien sûr il faut prévenir les autres personnes qui pourraient vouloir
le faire aussi, sinon ils ne trouvent pas le livre (dommage) voire
pire : ils “cassent” votre rangement avec des livres en désordre, avec
le coût en performance qu’on a vu.&lt;/p&gt;

&lt;p&gt;2) On se basait sur le fait que la seule information est la tranche
du livre, avec titre et auteur. Mais on n’est pas obligés. On peut
faire un papier qu’on scotche à côté de notre étagère pour expliquer
le système de rangement.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Enrichir la structure&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Et là encore, les bibliothèques existent depuis longtemps et ont tenté
plein de bonnes idées, pour finir par s’accorder sur un standard.&lt;/p&gt;

&lt;p&gt;Les allées sont rangées par thèmes, qui ont des sous-catégories,
on colle à chaque livre une référence unique… et on souhaite
toutefois que ce soit facile à naviguer quel que soit la manière
dont nos lecteurs veulent aborder le problème.&lt;/p&gt;

&lt;p&gt;On ne peut ranger nos livres physiquement que d’une façon, alors
on a recours à une “structure” encore plus complexe mais plus
astucieuse : ajouter en plus des étagères de livres des fiches ou
dossiers, permettant de retrouver référence et section en fonction
de votre question.&lt;/p&gt;

&lt;p&gt;Un catalogue va lister tous les livres par ordre alphabétique du nom
des auteurs. Quand un livre a trois auteurs, il sera présent trois
fois dans ce catalogue et ce n’est pas grave parce que ces trois
lignes mèneront vers la même référence, et donc un seul exemplaire
physique du livre.&lt;/p&gt;

&lt;p&gt;Sur les tonnes de livres et les millions de pages cumulées des
ouvrages, vous venez d’ajouter trois lignes, même pas une feuille A4,
pour simplifier la vie de tous vos lecteurs.&lt;/p&gt;

&lt;p&gt;On a fait une structure plus complexe mais plus puissante.
Et tant qu’on y est, on va faire un catalogue par titre, un par
éditeur, un par date, et des entrées par sujets pour pouvoir
répondre aux lecteurs qui cherchent des livres à la croisée des
sujets, comme histoire et religion, science et bande dessinée, etc.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Indexation&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Ces catalogues papier ont un nom : maintenant presque tout est
informatisé, mais avant on appelait ça des index. Et c’est tellement
utile que de nombreux livres de référence ont aussi un ou plusieurs
index permettant de retrouver le contenu dans le livre.&lt;/p&gt;

&lt;p&gt;Index est un mot que vous avez peut-être déjà entendu au sujet des
bases de données, j’y consacrerai peut-être un épisode mais a priori
vous avez déjà compris comment ça marche, et surtout vous venez de
comprendre pourquoi un index est souvent très bien (pratique pour la
recherche), mais qu’il a toujours un coût (écrire et mettre le
catalogue à jour), et que parfois on choisit de ne pas payer ce coût
car ça n’a pas assez d’utilité, par exemple, de faire un catalogue de
livres en fonction des prénoms des personnages principaux et
secondaires.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un mot sur la suite&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On a balayé la plupart des catégories d’épisodes que je voulais faire :
un concept très abstrait mais utile (&lt;a href=&quot;/002/&quot;&gt;002. le cache&lt;/a&gt;),
un sujet simple mais plein de pièges à démystifier
(&lt;a href=&quot;/004/&quot;&gt;004. la priorité des règles CSS&lt;/a&gt;),
un sujet business (&lt;a href=&quot;/005/&quot;&gt;005. achats IT B2B&lt;/a&gt;),
de la philosophie (&lt;a href=&quot;/006/&quot;&gt;006. le Vide, l’Unité et l’Infini&lt;/a&gt;),
et quelques pièges ou astuces dans Ruby on Rails
(&lt;a href=&quot;/003/&quot;&gt;003. les requêtes N+1&lt;/a&gt; et &lt;a href=&quot;/007/&quot;&gt;007. les associations&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Avec &lt;a href=&quot;/001/&quot;&gt;001. listes chaînées&lt;/a&gt; et 
&lt;a href=&quot;/008/&quot;&gt;008. structures de données et algos de recherche&lt;/a&gt;
je vise à dédramatiser un sujet souvent inquiétant dans les
premières années d’école d’informatique ou d’apprentissage en solo
dans les livres ou sur Internet. Dans la vraie vie vous utiliserez
rarement les listes chaînées mais plutôt une bibliothèque ou
les constructions de votre langage de programmation.
Bref c’est bon pour la culture, et pour donner des idées, mais 
je trouve très dommage qu’il y ait des barrières à l’entrée
alors qu’on pourrait tout de suite commencer à apprendre sur des
projets plus amusants.&lt;/p&gt;

&lt;p&gt;Pour la suite, je vais essayer de tourner sur ce genre de sujets,
je suis preneur de vos retours sur twitter
&lt;a href=&quot;https://twitter.com/zen_m4&quot;&gt;.
Merci et à bientôt !&lt;/a&gt;&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Un index en base de données c'est comme un index dans une bibliothèque
	</itunes:subtitle>
	<itunes:summary>
	  Un index en base de données c'est comme un index dans une bibliothèque
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/uml_king.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/253676618-zenm4-009-zen-metaphor-indexation.m4a" length="45400" type="audio/mp4" />
	<itunes:duration>7:34</itunes:duration>

        <pubDate>Sun, 20 Mar 2016 14:45:00 +0100</pubDate>
        <link>http://zenm4.net/009/</link>
        <guid isPermaLink="true">http://zenm4.net/009/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Structures de données et algos de recherche</title>
        <description>&lt;p&gt;Bonjour, bienvenue dans cet épisode 8 sur les algorithmes de recherche
et de tri de données, inséparable de cet autre sujet : les structures de données.&lt;/p&gt;

&lt;p&gt;Pour moi, une grande partie du travail de codeur (mais pas que de codeurs),
surtout débutant (mais pas que), c’est de rentrer des informations,
puis chercher des informations.&lt;/p&gt;

&lt;p&gt;Il y a beaucoup à dire, j’ai écrit de quoi faire deux épisodes, il y
en aura sûrement un troisième dans les mêmes lignes plus tard.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ranger et chercher&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Les deux sont très liés : jeter tous vos livres n’importe où est une
méthode de rangement incroyablement rapide, mais la recherche est
incroyablement inefficace.&lt;/p&gt;

&lt;p&gt;Ranger tous vos livres par titre demande du travail, mais revenir chercher
un livre par la suite est très rapide, si on se rappelle du titre bien sûr.&lt;/p&gt;

&lt;p&gt;Autre avantage : si vous n’avez pas le livre, vous voyez qu’il manque là
où l’ordre alphabétique l’aurait placé : inutile de le chercher ailleurs,
vous savez que vous ne le possédez pas ou l’avez prêté en ce moment.&lt;/p&gt;

&lt;p&gt;L’alternative, sans rangement, aurait été de regarder chacun de vos
livres, et de vous rendre compte tout à la fin que vous ne l’avez pas.
C’est très inefficace et frustrant.&lt;/p&gt;

&lt;p&gt;C’est pour cela que chacune des méthodes n’est pas objectivement
meilleure ou moins bonne, mais les papiers scientifiques sur les
structures de données ou algos de tri vont chercher à les évaluer en
terme de meilleur cas, pire cas, et cas moyen.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Explorer le problème&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Un léger problème toutefois, une série de plusieurs tomes a rarement des
titres en ordre alphabétique, et vous devrez donc éparpiller la série dans
votre bibliothèque.&lt;/p&gt;

&lt;p&gt;Nouveau problème, nouvelle solution.
On tente un truc un peu plus malin : trier par nom d’auteur.&lt;/p&gt;

&lt;p&gt;C’est un avantage intéressant dont se servent les librairies et les
bibliothèques : ranger par auteur permet souvent d’avoir des livres
côte à côte qui soient probablement intéressants pour l’acheteur ou le
lecteur, ne serait-ce que par thème proche ou pour ranger une série
ensemble.&lt;/p&gt;

&lt;p&gt;Chaque auteur écrit plusieurs livres, enfin on l’espère pour eux. Il
faut donc un autre critère déterminant pour classer entre eux les
livres de l’auteur : alphabétique ou date casserait là aussi des
séries (pour les auteurs qui écrivent plusieurs séries en parallèle),
à vous de voir.&lt;/p&gt;

&lt;p&gt;Au pire, on vous force à reparcourir la section des livres d’un auteur
du début à la fin pour savoir si le magasin possède bien tel ou tel
exemplaire. On a perdu le côté immédiat et infaillible de l’ordre
alphabétique pur, mais on a gagné quand même puisqu’on a restreint
cette phase pénible à la section d’un auteur.&lt;/p&gt;

&lt;p&gt;Sur les milliers d’ouvrages de la librairie, vous y gagnez :
imaginez la longueur de la section de livres qui commencent par
“Histoire de/des/de la” ou “Méthode de/des/pour” par exemple.&lt;/p&gt;

&lt;p&gt;Eh oui : la nature de vos données va donc aussi influer sur le choix
de la structure de données à choisir !&lt;/p&gt;

&lt;p&gt;Attention toutefois :
il faudra trouver une astuce quand il y a plusieurs auteurs…&lt;/p&gt;

&lt;p&gt;&lt;b&gt;La structure et le besoin&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On vient de faire un arbitrage entre la complexité de rangement à
chaque fois qu’on ajoute ou remet un livre dans les étagères, contre
un énorme avantage à la recherche. Si votre problème est rarement
d’ajouter ou ranger des éléments, et plus souvent de rechercher, c’est
un coût qu’il est intéressant de payer.&lt;/p&gt;

&lt;p&gt;Mais quand vous faites des logs dans votre application, vous listez
tout ce qui se passe pour, peut-être, y chercher des informations un
jour. On peut alors légitimement choisir l’arbitrage inverse.&lt;/p&gt;

&lt;p&gt;Par exemple, les journaux sont un produit radicalement différent d’un
livre : ils contiennent des informations variées d’auteurs variés, et
une bonne partie de ce qu’ils contiennent n’est plus aussi intéressant
au bout d’une semaine, un mois, deux ans… Le rangement de journaux
par date semble être le plus sensé, et empiler vos journaux les uns
au-dessus des autres une méthode tout à fait acceptable.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Bref, ranger et rechercher : l’un impose des contraintes à l’autre, et vice-versa. 
Même chose pour la paire structure de données et traitements :
vous rendrez certaines choses possibles ou impossibles, tout en en rendant
d’autres plus simples ou plus compliquées.&lt;/p&gt;

&lt;p&gt;C’est pour cela qu’en général aucun code ou aucun algo n’est
mieux qu’un autre, ils sont simplement plus ou moins adaptés, et la
clé est de connaître à la fois la nature des données, les opérations
que l’on veut faire le plus souvent, le moins souvent, et des ordres
de grandeur pour chaque.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pourquoi cet épisode ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;C’est un sujet beaucoup enseigné en écoles et dans les livres de
programmation, on a du mal à voir le but, et ça en bloque plus
d’un. Heureusement, il y a des chances que vous déléguiez tout ce
travail à la base de données, qui fait cela très bien. Pas
d’inquiétude.&lt;/p&gt;

&lt;p&gt;Mais pour les rares fois où c’est votre job de choisir la base de
données la plus adaptée, et pour les cas très fréquents où vous seriez
tentés d’écrire des lignes de code très simples mais qui refont en
moins bien le travail que la base de données aurait pu faire, ça me
semble important voire nécessaire de comprendre ce qu’il y a en dessous.&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Chercher et ranger en fonction de la structure de données c'est comme chercher un livre dans une bibliothèque en fonction du rangement
	</itunes:subtitle>
	<itunes:summary>
	  Chercher et ranger en fonction de la structure de données c'est comme chercher un livre dans une bibliothèque en fonction du rangement
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/lotus.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/251711970-zenm4-008-zen-metaphor-structures-de-donnees-et-algos-de-recherche.m4a" length="44400" type="audio/mp4" />
	<itunes:duration>7:24</itunes:duration>

        <pubDate>Sun, 13 Mar 2016 14:45:00 +0100</pubDate>
        <link>http://zenm4.net/008/</link>
        <guid isPermaLink="true">http://zenm4.net/008/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Les associations dans Rails</title>
        <description>&lt;p&gt;Bonjour, voici l’épisode 7, sur les associations dans Rails.
Il fait suite à l’épisode 6, où je vous recommande de toujours
considérer la cardinalité de ce dont vous parlez : 0, 1 ou N.&lt;/p&gt;

&lt;p&gt;En pratique c’est aussi ce que vous trouverez dans un diagramme
UML ou dans vos bases de données : associations 1 à 0 ou 1, 1 à 1,
1 à N et N à N. Plus qu’un épisode de métaphore, c’est un épisode
qui sert de “pont” entre trois domaines : UML, SQL relationnel,
et ActiveRecord qui est l’ORM de Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Là encore, il y a une introduction à Rails et ActiveRecord
dans &lt;a href=&quot;/003/&quot;&gt;l’épisode 3 sur les requêtes N+1&lt;/a&gt;,
que je vous recommande si vous êtes perdus.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Le cas de l’association &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;L’ORM, c’est la correspondance entre des objets Ruby et des
données dans une base de données.&lt;/p&gt;

&lt;p&gt;On fait une correspondance entre une table et une classe,
un champ dans une table et une propriété de l’objet,
et un enregistrements de la table avec une instance d’objet.&lt;/p&gt;

&lt;p&gt;L’enjeu de la modélisation objet est de représenter un
modèle pratique et utilisable de la réalité (à défaut
d’être exact), et une des méthodes les plus connues (je ne
dis pas les seules ni que la norme précise est respectée)
est le diagramme de classes de la norme UML.&lt;/p&gt;

&lt;p&gt;Quant aux bases de données relationnelles, elles sont
souvent représentées par quelque chose approchant les
diagrammes entité-relations, les MCD de Merise ou plus
simplement… les schémas de bases de données.&lt;/p&gt;

&lt;p&gt;Dans Ruby on Rails également, on a la possibilité de
décrire des associations entre objets.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Note sur l’anglais&lt;/b&gt;
Je parlerai de code en anglais avec un énorme accent français,
parce que ça fait une différence entre le code et le commentaire ;
pour retrouver les mêmes mots dans mes exemples que dans la
documentation ou sur StackOverflow, et parce que le code Ruby et Rails
est presque aussi facile à lire que des phrases anglaises.&lt;/p&gt;

&lt;p&gt;On peut débattre de “faut-il coder en français ou en anglais”,
mais mon but n’est pas de vous forcer à faire quoi que ce soit :
dans votre équipe, dans votre projet, trouvez votre propre équilibre.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Has Many&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;L’association 1-N, que Rails nomme Has Many.
Par exemple, un panier a beaucoup d’articles :
&lt;code class=&quot;highlighter-rouge&quot;&gt;Cart Has Many Articles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;À l’inverse, un article ne peut être que dans un seul panier.
C’est l’association Belongs To : &lt;code class=&quot;highlighter-rouge&quot;&gt;Articles Belongs To Cart&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En base de données, ActiveRecord s’attend à trouver la colonne
&lt;code class=&quot;highlighter-rouge&quot;&gt;cart_id&lt;/code&gt; dans la table &lt;code class=&quot;highlighter-rouge&quot;&gt;articles&lt;/code&gt;, et un &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; dans la table &lt;code class=&quot;highlighter-rouge&quot;&gt;carts&lt;/code&gt;.
Vous pouvez sortir de ces conventions, mais lisez bien la doc
d’ActiveRecord pour apprendre à le faire proprement.&lt;/p&gt;

&lt;p&gt;ActiveRecord vous donnera plein de méthodes utiles :
&lt;code class=&quot;highlighter-rouge&quot;&gt;cart.articles&lt;/code&gt; pour avoir un tableau des articles du panier,
&lt;code class=&quot;highlighter-rouge&quot;&gt;cart.articles=&lt;/code&gt; pour enregistrer ces articles dans le panier,
&lt;code class=&quot;highlighter-rouge&quot;&gt;cart.article_ids&lt;/code&gt; pour les identifiants.&lt;/p&gt;

&lt;p&gt;De l’autre côté, &lt;code class=&quot;highlighter-rouge&quot;&gt;article.cart&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;article.cart=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;article.cart_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Note sur l’enregistrement&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Attention, il est important de noter que tout ce que vous faites ici
c’est travailler sur des objets Ruby. Rien n’est enregistré.
Il y a trois étapes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;aller chercher les données en base et en faire des objets
&lt;em&gt;avec un where, find, ou une méthode d’accès comme &lt;code class=&quot;highlighter-rouge&quot;&gt;@cart.goods&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;travailler sur lesdits objets
&lt;em&gt;avec tous les traitements Ruby et Rails que vous voulez&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;enregistrer tout cela dans la base de données
&lt;em&gt;si vous avez fait des changements, il faut les sauvegarder&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous modifiez des objets Ruby, tant que vous n’avez pas sauvé
vos objets Ruby en base, seul le bout de code qui est allé les
chercher (et les bouts de code auxquels il les a donnés) sont au
courant des modifications. Si quelqu’un d’autre va chercher les
infos en base, il ne voit pas les changements.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;HABTM&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Il y a aussi l’association N-N, que Rails nomme
Has And Belongs To Many, HABTM pour faire court.&lt;/p&gt;

&lt;p&gt;Par exemple, une personne peut posséder plusieurs logements.
Vous pouvez n’être propriétaire de rien du tout (&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;),
d’un seul (&lt;code class=&quot;highlighter-rouge&quot;&gt;[:home]&lt;/code&gt;), et certains peuvent en avoir énormément
(&lt;code class=&quot;highlighter-rouge&quot;&gt;[:home, :beach_house, :ski_house, :fishing_house]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Mais si votre client souhaite pouvoir noter qu’une maison a
plusieurs propriétaires, et non un seul, 1-N (Has Many) ne suffit pas.
Il faut passer à N-N (HABTM).&lt;/p&gt;

&lt;p&gt;La table Owner ne contient pas d’ID de House
(sur un formulaire papier, on écrirait maison 1, maison 2, maison 3….
impossible de savoir combien on devrait en prévoir, et que d’espace
gaspillé !), pas plus que la table House ne contient d’ID de Owner.&lt;/p&gt;

&lt;p&gt;Mais il y aura en BDD une table dite de jointure, parce qu’elle
fait le lien entre les données des deux tables.
Rails l’appellera &lt;code class=&quot;highlighter-rouge&quot;&gt;Houses_Owners&lt;/code&gt;, et cette table contiendra une clé
&lt;code class=&quot;highlighter-rouge&quot;&gt;house_id&lt;/code&gt; et une clé &lt;code class=&quot;highlighter-rouge&quot;&gt;owner_id&lt;/code&gt; contenant les identifiants
respectifs de House et Owner.
Il y aura ensuite autant d’enregistrement que de
“liens de possession” entre une maison et un propriétaire.&lt;/p&gt;

&lt;p&gt;Les méthodes utiles seront les mêmes, &lt;code class=&quot;highlighter-rouge&quot;&gt;owner.houses&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;owner.houses=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;owner.house_ids&lt;/code&gt; et réciproquement &lt;code class=&quot;highlighter-rouge&quot;&gt;house.owners&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;house.owners=&lt;/code&gt; et
&lt;code class=&quot;highlighter-rouge&quot;&gt;house.owner_ids&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Has-Many Through&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Mais on sait seulement qu’il y a un lien ! On n’a pas d’information
sur la nature ou les conditions de ce lien.
Si vous voulez que cette association porte des informations, l’idée
de la jointure est bonne. Poussons-la plus loin.&lt;/p&gt;

&lt;p&gt;Faites un objet qui relie les deux et dans lequel vous rangez les
informations de ladite relation, puis des Has-Many vers cet objet.&lt;/p&gt;

&lt;p&gt;Par exemple pour une location de voiture &lt;code class=&quot;highlighter-rouge&quot;&gt;Person Has Many Rentals&lt;/code&gt;
et &lt;code class=&quot;highlighter-rouge&quot;&gt;Car Has Many Rentals&lt;/code&gt;. Ainsi chaque Rental sait retrouver
la bonne voiture, son locataire, et tout ce que vous voudriez
ajouter, comme : les dates et heures de début et fin de location,
le prix appliqué, des infos variées etc.&lt;/p&gt;

&lt;p&gt;Rails proposera un dernier confort dans ce cas, les Has Many Through,
ici &lt;code class=&quot;highlighter-rouge&quot;&gt;Person Has Many Cars Through Rentals&lt;/code&gt;, qui veut dire
“on peut retrouver toutes les voitures d’un client,
à condition d’aller les chercher à travers son historique de locations”,
et vous pourrez alors avoir les deux méthodes utiles
&lt;code class=&quot;highlighter-rouge&quot;&gt;person.cars&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;person.car_ids&lt;/code&gt; à disposition.
Je ne pourrais pas vous donner de &lt;code class=&quot;highlighter-rouge&quot;&gt;person.cars=&lt;/code&gt; car il faudrait
alors renseigner tous les objets Rental entre deux.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Has-One&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Enfin, je vous mets en garde contre les associations 1-1,
qui sont toujours techniquement possibles, mais qui sont pour moi
assez rares.&lt;/p&gt;

&lt;p&gt;En tout cas, c’est signe qu’il y a une question à poser :
on veut dire “un chien a un maître”, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog Has One Master&lt;/code&gt;…
mais en réalité &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog Belongs To Master&lt;/code&gt;,
car un maître peut avoir plusieurs chiens (là encore, 0, 1 ou N chiens)
mais un chien ne peut pas avoir plusieurs maîtres.&lt;/p&gt;

&lt;p&gt;Enfin, c’est possible dans la vraie vie et mais si c’était le cas,
vous n’auriez pas tenté d’écrire “un chien A UN maître”.&lt;/p&gt;

&lt;p&gt;D’autre part parce que si les informations sont si “couplées” et
doivent aller la main dans la main, pourquoi ne pas tout mettre dans
la même table ? Si un client peut avoir plusieurs mails, que certaines
boîtes mail peuvent être partagées… on ne se pose aucune question,
on laisse dans la même table email et nom du client.&lt;/p&gt;

&lt;p&gt;Mais quand vous avez un souci avec un Has One, je pense qu’en général
il y aura une évolution un jour pour le transformer en Has Many :
&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer Has One Address&lt;/code&gt; deviendra probablement &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer Has Many Addresses&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;PhoneNumber Has One Customer&lt;/code&gt; plutôt &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer Has Many PhoneNumbers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si vous êtes toujours coincés, voici mon astuce, demandez-vous :
“puis-je avoir l’un sans l’autre ?”&lt;/p&gt;

&lt;p&gt;Une adresse sans maison a du sens (terrain vide),
une adresse avec plusieurs maisons a du sens (appartements),
une maison sans adresse n’a pas de sens (on l’a bien construite quelque part),
une maison avec plusieurs adresses est possible mais rare (coins de rues).&lt;/p&gt;

&lt;p&gt;Ainsi, on part sur &lt;code class=&quot;highlighter-rouge&quot;&gt;Address Has One House&lt;/code&gt;, ce qui était probablement
l’inverse de ce que vous vous attendiez à écrire dans un raisonnement
classique. En tout cas, j’avais pris l’exemple au hasard et
la conclusion m’a surpris moi-même.&lt;/p&gt;

</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Les associations dans ActiveRecord c'est comme dans les diagrammes UML et les BDD relationnelles.
	</itunes:subtitle>
	<itunes:summary>
	  Les associations dans ActiveRecord c'est comme dans les diagrammes UML et les BDD relationnelles.
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/eventail.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/250558766-zenm4-007-zen-metaphor-les-associations-dans-ruby-on-rails.m4a" length="68300" type="audio/mp4" />
	<itunes:duration>11:23</itunes:duration>

        <pubDate>Sun, 06 Mar 2016 14:45:00 +0100</pubDate>
        <link>http://zenm4.net/007/</link>
        <guid isPermaLink="true">http://zenm4.net/007/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Le Vide, l&#39;Unité, et l&#39;Infini</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 6, l’épisode philosophie.&lt;/p&gt;

&lt;p&gt;Pas de métaphore principale à filer tout le long de l’épisode,
parce qu’à chaque fois que je trouvais une formulation, elle
semblait aussitôt évidente ou idiote. Mais commençons.&lt;/p&gt;

&lt;p&gt;Pour moi, il y a trois “quantités” en informatique, que vous
trouverez à la fois dans votre code, vos bases de données, et
même votre design et vos aspects métier :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;0.&lt;/b&gt; rien du tout&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;1.&lt;/b&gt; une chose&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;N.&lt;/b&gt; une liste d’éléments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quand on parle d’une chose, on doit souvent envisager qu’elle soit présente ou absente.
Quand on parle d’une liste, elle peut bien sûr être vide ou contenir un seul élément,
plusieurs éléments, voire… une infinité.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Questions pièges et découverte du métier&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;À titre personnel et professionnel, ces nuances m’ont beaucoup aidé à
communiquer, et parfois soulever des problèmes ou proposer des solutions.
Ce sont des recettes et astuces que j’essaie de ne jamais oublier.&lt;/p&gt;

&lt;p&gt;Quand on vous parle d’une seule chose, demandez s’il y en a aucune ou plusieurs.&lt;/p&gt;

&lt;p&gt;Imaginez qu’on vous montre un prototype d’interface et qu’on vous dise
“et ici on affiche l’adresse du client”. Essayez toujours d’envisager les cas :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;du client qui n’a pas d’adresse connue
(ça vous aidera à gérer les cas des NPAI, des incontactables, des données invalides)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;du client qui a plusieurs adresses
(ça vous aidera à parler des déménagements, des résidences secondaires… et des données en doublon !)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Le Code et l’unité&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Les structures de code de presque tous les langages usuels reflètent cela :
les &lt;code class=&quot;highlighter-rouge&quot;&gt;if then else&lt;/code&gt; parlent d’un prédicat vrai ou faux,
les variables peuvent être vides ou remplies,
quand on a un objet dans une variable, on peut aller chercher une propriété
ou appeler une méthode sur cet objet, et ça peut marcher ou non.&lt;/p&gt;

&lt;p&gt;Dans tous ces cas-là, on parle du cas “UN” où il y a une chose au départ,
une méthode à appliquer, et une chose à l’arrivée (fut-elle une liste).&lt;/p&gt;

&lt;p&gt;On commence en général à enseigner cette façon de voir dans les tout premiers
paragraphes et cours d’algo ou de code : les variables et les structures de
contrôle.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Le Code et la Pluralité&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Juste après, vient l’une des constructions les plus importantes :
les listes, les boucles, etc.&lt;/p&gt;

&lt;p&gt;Dans tous ces cas-là, on parle du cas où “N” éléments au départ,
mais à l’arrivée, on peut vouloir plein de choses différentes.&lt;/p&gt;

&lt;p&gt;Par exemple, sur “N” éléments, voulez-vous :
* compter ce nombre d’éléments (et on retrouve les cas intéressants 0, 1 ou N)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;conserver une liste à l’arrivée, transformée d’une certaine manière :
    &lt;ul&gt;
      &lt;li&gt;les trier (renvoyer la même liste mais rangée différemment)&lt;/li&gt;
      &lt;li&gt;appliquer à tous les éléments le même traitement (appliquer une remise, une taxe)&lt;/li&gt;
      &lt;li&gt;conserver ou retirer uniquement les éléments selon une certaine règle (publiés ou non par exemple)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;avoir un seul résultat, comme
    &lt;ul&gt;
      &lt;li&gt;voir le premier ou dernier élément (selon un certain critère)&lt;/li&gt;
      &lt;li&gt;agréger : faire un traitement de groupe pour ressortir un résultat (une somme par exemple)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;travailler avec plusieurs listes pour
    &lt;ul&gt;
      &lt;li&gt;les “additionner”, disons plutôt faire l’union des deux listes&lt;/li&gt;
      &lt;li&gt;ressortir la liste des éléments communs, ou différents de ces listes&lt;/li&gt;
      &lt;li&gt;faire un traitement se basant sur plusieurs listes, par exemple le &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;
qui prend, comme une fermeture éclair (“zip”) le 1er élément de la liste A
et de la liste B pour travailler sur cette paire, puis le 2e de chaque
et ainsi de suite…
Bien sûr ce dernier cas a autant de variantes que vous voulez, mais à part &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;
ça commence à devenir très dur d’en parler dans un podcast.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et les structures de données de base de tant de langages sont alors
- le tableau (qui associe un élément à un nombre, sa position dans le tableau)
- le dictionnaire, souvent appelé Hash (qui associe un élément “clé” à un élément “valeur”)
et parfois des structures plus exotiques, qui vont proposer différentes propriétés.&lt;/p&gt;

&lt;p&gt;Dans mon univers de Rubyiste, je recommande toujours de lire
intégralement les pages de documentation de
&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Array.html&quot;&gt;Array&lt;/a&gt;,
&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Hash.html&quot;&gt;Hash&lt;/a&gt; et
&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Enumerable.html&quot;&gt;Enumerable&lt;/a&gt;,
qui aideront à faire de vous meilleur développeur, capable d’utiliser au
bon moment le bon outil de base. Mais chaque langage a les siens.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;La base de données&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Je vais passer rapidement sur la base de donnés, qui a aussi ces constructions,
et sur chacune de vos requêtes vous allez vous retrouver à prendre le premier,
le dernier, trier dans un sens ou l’autre, compter les nombre d’éléments qui
sont dans un certain cas, limiter vos recherches pour prendre seulement les 10
ou 100 premiers, proposer une pagination en BDD ou dans votre interface…&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expérience utilisateur, ergonomie, métier…&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Pour recentrer tout cela et ressortir du code, revenons aux questions pièges.&lt;/p&gt;

&lt;p&gt;On a vu au début de l’épisode qu’elles peuvent lancer une discussion
sur le métier et les cas à gérer, donc dessiner le périmètre de votre
travail, des évolutions très ou peu probables (je dis peu probable car
je ne vous crois presque jamais quand vous me dites “impossible, ça
n’arrivera jamais”) et donc d’une possible architecture logicielle.&lt;/p&gt;

&lt;p&gt;Ça marche aussi sur des écrans ou dessins, et pour l’ergonomie :
devant une belle image de votre future appli, dessinée avec un cas
moyen ou idéal en tête, il est très utile de poser ce genre de questions.
Et si on a plus ou moins d’informations ? Et si on doit caler une
liste de plusieurs numéros de téléphone au lieu d’un seul ?&lt;/p&gt;

&lt;p&gt;Bref, n’hésitez pas à utiliser cette technique à fond, pour l’instant
je n’ai perdu que très peu de temps cumulé à envisager des cas tordus,
qu’on a très vite identifiés comme “inutiles, à voir plus tard,
à voir tout de suite”, ou “critiques”.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expression&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Pour finir, on ne fait que répéter que le code est une activité
humaine et la qualité principale d’un ingénieur, la communication.
Dijkstra disait que la qualité principale d’un programmeur est
une excellente maîtrise de sa langue natale.
“À part un léger goût pour les mathématiques,” disait-il,
ce dont personnellement je ne suis même pas sûr.&lt;/p&gt;

&lt;p&gt;J’ai longtemps été pédant sur la langue française, allant jusqu’à
dire qu’un mail avec trop de fautes était éliminatoire. Je n’en
suis plus là, même si écrire un français correct est une marque
de respect et d’attention, et qu’un mail plein de fautes note
un manque de l’un et/ou de l’autre. Prenez vos responsabilités.&lt;/p&gt;

&lt;p&gt;Ce que je tiens à dire sur le sujet, en revanche, c’est que
je reste attentif aux fautes d’accord. Oui, c’est aussi simple
que mettre ou oublier des S au pluriel : car si quand vous
écrivez, vous ne savez même pas si vous parlez d’un ou de
plusieurs objets, comment voulez-vous programmer correctement ?
Et même plus fondamental : comment voulez-vous raisonner correctement ?&lt;/p&gt;

&lt;p&gt;Bref : zéro, Un, ou Plusieurs. Ne perdez jamais cela de vue.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ruby on Rails et les associations&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Et voilà, c’est tout pour aujourd’hui !
Autant j’étais peu inspiré par la philosophie la dernière fois,
autant j’ai écrit aujourd’hui de quoi faire deux épisodes et j’ai dû couper.&lt;/p&gt;

&lt;p&gt;Alors, prochain épisode : les associations dans Rails.&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Ne pas savoir sur combien d&#39;objets on travaille c'est comme ne pas savoir où l&#39;on est ni où on va.
	</itunes:subtitle>
	<itunes:summary>
	  Ne pas savoir sur combien d&#39;objets on travaille c'est comme ne pas savoir où l&#39;on est ni où on va.
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/fuji.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/249386231-zenm4-006-zen-metaphor-le-vide-lunite-et-linfini.m4a" length="50000" type="audio/mp4" />
	<itunes:duration>8:20</itunes:duration>

        <pubDate>Mon, 29 Feb 2016 00:45:00 +0100</pubDate>
        <link>http://zenm4.net/006/</link>
        <guid isPermaLink="true">http://zenm4.net/006/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Combien ça coûte</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 5 et premier épisode business !&lt;/p&gt;

&lt;p&gt;Parler business est un peu plus loin de la ligne éditoriale
technique de ce podcast, mais 100% dans la ligne des questions
que j’ai et auxquelles je réponds très souvent.
De plus dans mes communautés Ruby, Rails et Web c’est un
sujet clé car tout le monde semble vouloir devenir entrepreneur.&lt;/p&gt;

&lt;p&gt;Je partais sur une métaphore avec la voiture, mais j’en ai écrit assez pour
presque trois épisodes, du coup je vais parler uniquement de l’étape achat aujourd’hui.&lt;/p&gt;

&lt;p&gt;Alors voici quelques rappels (forcément incomplets mais on pourra étendre
la discussion si ça vous intéresse) sur l’achat de logiciels B2B, c’est
à dire par des entreprises, et pas du B2C, par des particuliers.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Quel véhicule pour quel besoin ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La plupart des voitures suffiront pour un transport de quelques personnes, bagages et meubles.&lt;/p&gt;

&lt;p&gt;Pourtant on peut acheter des voitures individuelles ou familiales ;
on n’a pas les mêmes besoins pour faire des courses ou un déménagement.&lt;/p&gt;

&lt;p&gt;Là encore, beaucoup de logiciels sont suffisamment adaptables pour
aller un peu au-delà de leurs usages de départ : pour nous ce serait
l’adaptation d’un logiciel sur étagère, ou d’aller un tout petit peu
plus loin que prévu en tenue de charge ou en volumétrie par exemple.&lt;/p&gt;

&lt;p&gt;Mais parfois on ne peut plus tricher : il faut un camion voire un
convoi exceptionnel, ou à l’inverse le poids, la vitesse limite et
le prix font que votre camion est l’outil le moins pratique
pour ce que vous vouliez faire.&lt;/p&gt;

&lt;p&gt;Il semble tout à fait normal de choisir un logiciel en fonction du
besoin le plus attendu, et les clients dont on se moque facilement
qui demandent à “pouvoir tout faire plus tard quand ils voudront”
sans rien prévoir n’aurait jamais fait cette erreur d’appréciation
en achetant un véhicule.&lt;/p&gt;

&lt;p&gt;De même il n’y a pas de mal pour le vendeur à chercher à connaître
votre budget assez tôt : on craint certes que le vendeur vous propose
uniquement des voitures de luxe au lieu d’une berline, mais des heures
d’explications à comparer toutes les berlines pour voir au final un
budget qui vous condamne au vélo ou au métro, n’est pas très productif.&lt;/p&gt;

&lt;p&gt;[NOTE : ça a parfois des avantages de se libérer des contraintes,
par exemple monétaires : on pourra vous proposer un chauffeur ou de
prendre l’avion, ce qu’on se serait interdit avec un budget “normal”,
et à l’inverse s’imposer des contraintes, comme éviter de considérer
l’avion, peut gagner du temps et… débloquer la créativité !]&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pareil ou différent ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Il n’y a pas de honte non plus à choisir dans le haut de gamme ou bas
de gamme, et vous verrez qu’au final les raisons de l’achat sont
souvent similaires : soit un besoin très étudié, soit… comme tout
le monde, un achat impulsif pour impressionner les copains.
Oui, ça existe dans le monde du logiciel, mais je ne donnerai pas de noms ;)&lt;/p&gt;

&lt;p&gt;La leçon plus pragmatique à tirer quand vous faites ce choix :
il y a un coût à ne pas faire comme les autres (par exemple choisir
l’électrique ou le GPL quand les stations et les expertises sont
encore rares), mais il y a aussi un coût à faire comme tout le
monde, car vous ne pourrez pas être franchement différent du
concurrent si vous avez le même véhicule, alors que vous pourriez
jouer sur vos forces si vous aviez un scooter et lui un camion.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Quel genre d’achat ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Parlons budget. Sur une voiture, il y a de très nombreuses
variables sur lesquelles on s’imagine pouvoir intervenir facilement :
payer comptant ou récurrent, c’est le choix du plan de financement ;
payer sa voiture en leasing, c’est le SaaS (Software as a Service)
sauf qu’à la fin il ne vous appartiendra jamais…&lt;/p&gt;

&lt;p&gt;… et quelque part votre obligation d’innover et continuer la R&amp;amp;D
c’est de s’assurer que régulièrement, vos clients souhaiteront passer
aux nouveaux produits qui sont tellement mieux que les anciens.
[Attention aux coûts de transition]&lt;/p&gt;

&lt;p&gt;Achat impulsif ou longue recherche ? Idem, chaque personne ou entreprise
peut décider de faire l’achat d’un logiciel A, et fera tout pour, ou au contraire
lister ses fonctionnalités souhaitées X, Y et Z et chercher ensuite le produit
qui correspondra le mieux à ses attentes.&lt;/p&gt;

&lt;p&gt;Illusion des métriques ? Là encore, les vendeurs vont faire une compétition
à grand renfort de 3, 5, 7 places, V6, V8 et autres options de motorisation,
nombre d’options et grand renfort de superlatifs comme “suréquipée”.
Au final on vous jette de la poudre aux yeux alors que votre besoin était
soit de faire attention à la consommation (quand les chiffres annoncés sont
exacts) soit, pour reprendre les mots légendaires du cahier des charges de
la 2CV : “transporter 4 passagers et 50kg de patates”.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Coûts cachés et transition&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Ça semble étrange de faire du logiciel neuf ou d’occasion ? C’est
pourtant le choix de beaucoup d’équipes pour savoir si elles vont
adapter un ancien logiciel ou lancer une refonte, et les arguments
sont similaires : “repartir de zéro” (en oubliant qu’on aura plein
d’habitudes à réapprendre), “ajouter une rustine” (en oubliant qu’on
est parfois au-delà de tout espoir).&lt;/p&gt;

&lt;p&gt;En prime on oublie les périodes de transition : la période sans voiture
si la nouvelle arrive un peu tard, et parfois presque pire la période
avec deux voitures (mais toujours un seul parking), les rendez-vous
à la préfecture pour la carte grise, les changements d’assurance…&lt;/p&gt;

&lt;p&gt;Dans le logiciel comme dans la vraie vie, ceux qui l’ont vécu plusieurs
fois sont plus prévoyants que ceux qui le vivent pour la première fois,
c’est un biais à connaître.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Les dangers de la métaphore&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Mais attention : la métaphore nous permet de comprendre rapidement la
situation et se poser de nouvelles questions en considérant plusieurs
angles, qui semblent évidents dans l’image et qu’on aurait oublié dans
le cas réel.&lt;/p&gt;

&lt;p&gt;La métaphore a toutefois ses limites, même si elle reste utile pour
qu’on puisse se poser la question à chaque fois : est-ce que ma
comparaison a toujours du sens ou est-ce que c’est justement le moment
de raisonner par opposition.&lt;/p&gt;

&lt;p&gt;Ici, la plus grande erreur des patrons, RH, managers… est de croire
que toutes les voitures sont identiques. Que l’on peut les ranger par
marque, modèle, caractéristiques et qu’elles se valent.&lt;/p&gt;

&lt;p&gt;Pour un bête produit physique, ça marche, et on va pouvoir utiliser un
process achat genre achat de gros et négociation pour faire baisser le prix.
Pour un métier cognitif et des personnes, ça semble illusoire.&lt;/p&gt;

&lt;p&gt;Mais on peut rattraper cette erreur : il est impossible de comparer
des développeurs et même des humains à des voitures neuves. On arrive
chacun avec son historique, on est donc tous (désolé la connotation
n’est pas voulue) des voitures d’occasion : on peut et on doit
chercher vos forces et faiblesses (vous devriez en parler en entretien).&lt;/p&gt;

&lt;p&gt;De même, un changement dans l’équipe a forcément des conséquences.
Il est de votre devoir de mettre un maximum en place pour minimiser
les risques (tests, documentation etc) mais remplacer un membre
d’équipe a forcément plus de conséquences que remplacer une pièce
ou changer de voiture.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et voilà !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous voilà un peu mieux armé pour comprendre les achats de logiciel B2B.
Je garde un prochain épisode avec la même métaphore, ou comme disait
&lt;a href=&quot;https://twitter.com/Phairupegiont&quot;&gt;@Phairupegiont&lt;/a&gt; sur Twitter,
la méta-métaphore, pour parler non des achats mais du métier de développeur
et des interactions avec votre manager… ou à l’inverse avec votre équipe.&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Le coût d&#39;un logiciel c'est comme le coût d&#39;une voiture
	</itunes:subtitle>
	<itunes:summary>
	  Le coût d&#39;un logiciel c'est comme le coût d&#39;une voiture
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/seedling.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/248148209-zenm4-005-zen-metaphor-achat-vente-de-logiciels-b2b.m4a" length="44000" type="audio/mp4" />
	<itunes:duration>7:20</itunes:duration>

        <pubDate>Sun, 21 Feb 2016 12:00:00 +0100</pubDate>
        <link>http://zenm4.net/005/</link>
        <guid isPermaLink="true">http://zenm4.net/005/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Priorité des règles CSS</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 4 !&lt;/p&gt;

&lt;p&gt;Beaucoup de gens y compris des devs expérimentés ont des soucis de CSS.
Il y a l’attitude défaitiste qui dit que vous n’y arriverez jamais,
il y a l’attitude “pas mon problème” qui refile le bébé à quelqu’un d’autre,
et il y a l’attitude snob qui méprise carrément le problème.
… et bien sûr il y a l’attitude qui consiste à tester, à apprendre, et à livrer de la valeur à ses utilisateurs et ses clients :)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OK, c’est dur&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;C’est vrai que ce n’est pas simple.
De manière générale, HTML et CSS c’est dur.&lt;/p&gt;

&lt;p&gt;Il y a eu des tas de normes qui s’empilent les unes sur les autres,
mais le vrai souci était la variété des navigateurs qui ne gèraient
pas tout pareil.&lt;/p&gt;

&lt;p&gt;Ça va un peu mieux et ça va me permettre de ne pas vous parler des
astuces IE6, difficiles à contourner mais qu’on connaissait bien, ou
IE7, un peu mieux a priori mais que finalement on connaissait moins.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pourquoi c’est dur ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;L’intention est louable : on veut séparer la forme et le fond.&lt;/p&gt;

&lt;p&gt;Vous avez un contenu HTML, que j’aime visualiser comme des boîtes dans
des boîtes dans des boîtes… etc.&lt;/p&gt;

&lt;p&gt;On souhaite garder les informations d’affichage à côté pour pouvoir
changer de design sans changer le code, et vice-versa.&lt;/p&gt;

&lt;p&gt;On veut alors ajouter des informations sur ce que représentent ces
boîtes, essentiellement son tag, sa classe, et son identifiant.&lt;/p&gt;

&lt;p&gt;À partir de tout cela, vous faites un autre fichier, une CSS pour
Cascading Style Sheets, Feuille de Style qui s’appliquent en Cascade
(pour une fois qu’on a un nom explicite !) qui contient une liste de
règles, des directives CSS.&lt;/p&gt;

&lt;p&gt;Elles sont toutes à prendre en compte, mais pas aussi séquentiellement
que du code où il y a un ordre précis, mais plutôt “toutes ensembles”.&lt;/p&gt;

&lt;p&gt;C’est comme si tout le monde venait parler en même temps dans une conversation !&lt;/p&gt;

&lt;p&gt;Du coup la moindre règle modifie les autres, ce que l’on appelle des
“effets de bord”, et c’est exactement ce qu’on essaie d’éviter de
faire quand on code.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Comment faire du sens dans ce bruit ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Dans la vraie vie, quand vous avez des gens qui parlent ensemble,
quand vous avez plusieurs consignes au travail qui semblent en conflit,
vous rangez aussi par priorités.&lt;/p&gt;

&lt;p&gt;Imaginez : on vous dit un jour de traiter tous les dossiers d’une
certaine manière, mais s’ils sont bleus d’une autre.
On vous dit que si un dossier traîne depuis trop longtemps, il est prioritaire.
Que si le client est VIP, c’est prioritaire.
Que si le patron le veut de suite, c’est ultra prioritaire.&lt;/p&gt;

&lt;p&gt;Qu’est-ce que vous faites ? Comme tout le monde : quand tout est
prioritaire, rien n’est prioritaire, et vous tentez de retrouver un
ordre décent dans tout cela.&lt;/p&gt;

&lt;p&gt;(D’ailleurs petite parenthèse : c’est pour cela que je refuse
d’utiliser la directive CSS &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt; et que je ne la recommande pas.)&lt;/p&gt;

&lt;p&gt;On s’arrête, on réfléchit, et on décide qu’on traitera le dossier du
patron en premier, puis les VIP, puis les anciens, puis les dossiers
normaux, qui passent en bas de la pile.&lt;/p&gt;

&lt;p&gt;La règle de priorisation CSS marche pareil : qui le dit, quand est-ce
qu’on le dit, mais surtout à propos de quoi on le dit.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qui parle quand ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Certaines pages Web n’ont pas d’information CSS.
Elles sont très rares, mais il y a bien une information qui existe :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;quand vous écrivez une page HTML pure avec des titres H1 et H2, ils sont grands et en gras&lt;/li&gt;
  &lt;li&gt;quand vous mettez une liste OL ou UL, ses éléments sont en retrait et avec un chiffre ou une puce&lt;/li&gt;
  &lt;li&gt;quand vous utilisez une balise P pour paragraphe, il y a un espace vide autour (padding)&lt;/li&gt;
  &lt;li&gt;les liens non visités sont bleus, les visités sont violets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On voit qu’il existe une CSS par défaut du navigateur, mais c’est la moins importante de toutes.&lt;/p&gt;

&lt;p&gt;Ensuite, vous pouvez utiliser des CSS que vous importez via @import, link, ou dans le header,
ou en ouvrant des balises &lt;style&gt; dans le corps de la page (mais ce n&#39;est pas propre)
C&#39;est le deuxième niveau de priorité. Au sein de ce même niveau de priorité, celui qui parle
le dernier a raison.&lt;/style&gt;&lt;/p&gt;

&lt;p&gt;Enfin, vous pouvez utiliser le style “inline” (écrit directement dans
le HTML sur l’attribut style de l’élément, mais ce n’est vraiment pas
propre) : c’est le dernier à parler, il est exactement là où vous
voulez l’appliquer, on considère que c’est celui qui écrase tout le
reste et qui aura raison au final.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qui parle de quoi ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On a cinq manière d’identifier des éléments HTML, cinq sélecteurs
disponibles dans nos règles CSS :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l’élément, ou le tag, c’est le type de boîte HTML (DIV par exemple)&lt;/li&gt;
  &lt;li&gt;la classe, précédée par un point, quelque chose que vous pouvez ajouter pour noter la
similarité entre plusieurs éléments (sur mes dossiers, la couleur
rouge ou bleu, écrit au marqueur ou au stylo, le fait que ce soit un
client VIP…)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;l’identifiant, précédé par un dièse, quand le dossier est nommé (le cas de Mr Tartempion)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;des pseudo-sélecteurs, avec des symboles “deux points”&lt;/li&gt;
  &lt;li&gt;et des sélecteurs par attributs (avec des crochets) depuis CSS3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous utilisez ces deux derniers vous savez un peu comment ça
marche, alors je vais me concentrer sur les bases : élément, classe,
identifiant.  En plus, on peut les enchaîner : tous les dossiers bleus
à condition qu’ils soient dans une armoire, voire expressément les
dossiers bleus dans une armoire bleue.&lt;/p&gt;

&lt;p&gt;L’élément vaut un point : &lt;code class=&quot;highlighter-rouge&quot;&gt;UL LI A&lt;/code&gt; vaut alors trois points.
Une classe vaut dix points : &lt;code class=&quot;highlighter-rouge&quot;&gt;UL.menu&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;.menu LI&lt;/code&gt; valent onze points.
L’identifiant vaut cent points.&lt;/p&gt;

&lt;p&gt;On donne ainsi une “prime à la précision” : plus le sélecteur est précis,
plus votre règle monte en priorité, et plus c’est elle qui aura raison.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qui dit quoi ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Enfin, on sait de quoi vous parler, mais il faut savoir quoi faire dessus.
Vous listez des propriétés CSS que vous voulez appliquer.&lt;/p&gt;

&lt;p&gt;Certaines s’appliqueront à tous ses enfants (toutes les boîtes dans
cette boîte), d’autres non.  Et tout finit par s’appliquer en même
temps ! Dans la vraie vie, un humain l’oublierait probablement, mais
pas un ordinateur : si une règle très peu prioritaire dit d’écrire en vert
et toutes les règles plus prioritaires ne changent que la taille et les bordures
de l’élément, le texte est toujours vert.&lt;/p&gt;

&lt;p&gt;Si vous voulez changer cela, vous allez réécrire cette propriété plus
tard, prendre la précédence sur ce qui a été dit avant.&lt;/p&gt;

&lt;p&gt;On dit que le droit est le métier des exceptions, mais le
développement aussi : je vous demande de faire un certain traitement,
sauf dans tel cas, mais sauf dans tel cas encore plus précis, auquel
cas on réécrit encore par dessus les deux règles moins importantes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Boni&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On vient de voir que c’est un sujet complexe. Il y a de plus en plus
d’outils pour vous aider, c’est bien, et de pratiques à apprendre, ce
qui peut porter à confusion et ajoute à la complexité ambiante. Je
voulais garder l’épisode “low-tech” pour ne perdre personne et parce
que je crois qu’il y a de la valeur dans les bases et l’historique.&lt;/p&gt;

&lt;p&gt;J’avais parlé d’un épisode philosophique, l’écriture n’est pas venue
aussi naturellement que je pensais, je le garde au chaud pour plus tard.
De même j’hésite à faire des épisodes business, ce qui sort clairement
de la ligne annoncée mais qui a également beaucoup de valeur.&lt;/p&gt;

&lt;p&gt;De plus, à mon sens, on ne peut se contenter de faire son job,
il y a toujours de vastes considérations à prendre en compte autour
de votre périmètre précis, que ce soit pour progresser, pour maximiser
les opportunités, ou pour deviner ce qui va vous tomber dessus et
anticiper un peu.&lt;/p&gt;

&lt;p&gt;Bref, n’hésitez pas, je suis ouvert aux commentaires sur Twitter @zen_m4 :)&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Composer des règles CSS et en connaître la priorité c'est comme travailler avec des règles qui s&#39;empilent et se contredisent (consignes, lois...)
	</itunes:subtitle>
	<itunes:summary>
	  Composer des règles CSS et en connaître la priorité c'est comme travailler avec des règles qui s&#39;empilent et se contredisent (consignes, lois...)
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/sakura.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/247008181-zenm4-004-zen-metaphor-priorite-des-regles-css.m4a" length="54200" type="audio/mp4" />
	<itunes:duration>9:02</itunes:duration>

        <pubDate>Sun, 14 Feb 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/004/</link>
        <guid isPermaLink="true">http://zenm4.net/004/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Les requêtes N+1</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 3, plus proche de mon quotidien de Rubyiste,
sur un oubli classique dans Rails &lt;b&gt;les requêtes N+1&lt;/b&gt;, un des premiers
symptômes à vérifier quand votre application est trop lente.&lt;/p&gt;

&lt;p&gt;Je n’aime lâcher personne dans un domaine complètement inconnu, on va
commencer par une introduction superficielle à Rails et ActiveRecord,
merci comme toujours de me pardonner quelques inexactitudes qui ne sont
là que pour éviter la confusion.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ruby on Rails / MVC&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le framework Ruby on Rails a été conçu pour faire des applications Web avec
une architecture MVC, Modèle-Vue-Contrôleur. On ne rentrera pas ici dans les
détails mais vous pourrez trouver de nombreuses ressources sur Internet et
dans les liens de cet épisode :
&lt;a href=&quot;http://www.jeveuxapprendreruby.fr/&quot;&gt;jeveuxapprendreruby.fr&lt;/a&gt;
et mon &lt;a href=&quot;http://maitre-du-monde.fr/web_primer/fr/&quot;&gt;“Web Primer”&lt;/a&gt;,
une vue d’ensemble et liste de vocabulaire sur un grand nombre de concepts
utilisés dans l’architecture Web et la conception MVC.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ActiveRecord et ORM&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Là encore, le but n’est pas de tout détailler. ActiveRecord est à la fois
le nom d’un concept architectural et le nom de son implémentation en Ruby
pour Rails.&lt;/p&gt;

&lt;p&gt;Le principe est que l’on travaille dans un langage objet, Ruby, et que
l’on souhaite travailler avec des données venant d’une base de données
relationnelles.&lt;/p&gt;

&lt;p&gt;Rails a identifié des besoins courants, des choses que les développeurs
résolvent toujours de la même manière, et souhaite donc vous les fournir
directement sans une ligne de code : c’est sa philosophie
“Convention over Configuration”.&lt;/p&gt;

&lt;p&gt;Cette couche logicielle s’appelle ORM “Object-Relational Mapping”, c’est
à dire correspondance Objet - Relationnel. Elle a des avantages bien sûr,
mais aussi évidemment des défauts, dont celui de cacher les difficultés.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Quel piège ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Il est extrêmement simple en Ruby on Rails de créer des pages de référentiel,
et par exemple une liste d’Auteurs et une liste de Livres. Quand on affiche
la liste des Livres, on souhaite probablement afficher dans une colonne le
nom de l’auteur, et que ce soit un lien vers la fiche détaillée de l’auteur.&lt;/p&gt;

&lt;p&gt;Votre modèle fait quelques lignes (déclaration des champs et associations),
votre vue est un HTML avec des balises pour exécuter du code Rails, qui se
base sur la présence d’une variable @livres correctement remplie.&lt;/p&gt;

&lt;p&gt;Ne reste plus que votre contrôleur qui doit savoir comment faire le pont entre
les deux. Il faut aller chercher tous les livres en base de données.
Le code Rails est très simple :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@livres = Livre.all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dans une application réelle bien sûr, on a davantage de contraintes comme
de faire de la pagination : si vous avez plus d’une centaine de livres,
il est inutile et lourd de tout mettre sur une page et on proposera de les
voir par pages de 20 à 100 livres à la fois.&lt;/p&gt;

&lt;p&gt;Cependant, on s’expose au problème N+1 : à chaque ligne de votre Vue,
on a un objet livre duquel on voudrait connaître l’auteur. Rails va
alors faire la requête. Au lieu d’avoir fait 1 requête, vous en faites N.&lt;/p&gt;

&lt;p&gt;Si l’on savait que l’on aurait besoin des Auteurs, on peut le demander
directement à la base de données via une jointure, qui se code ainsi :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@livres = Livre.joins(:auteur)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et la métaphore ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Si ce sujet semble obscur, voici ce que ferait votre première version
de code : moi, le contrôleur, dois appeler au téléphone une bibliothécaire,
le modèle, qui s’occupera de parler avec son archiviste, la base de donnés,
qui est gardien de toutes les données dans sa bibliothèque.&lt;/p&gt;

&lt;p&gt;Chaque connexion à la base de donnée est une coup de fil différent.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais la liste de tous les livres.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;L’archiviste compile sa liste, présente à la bibliothécaire un paquet
de fiches, et comme je ne suis pas très doué avec leur jargon relationnel,
le modèle me convertit tout cela en un tableau d’objets Ruby : on peut
se dire que c’est un classeur de fiches qui sont simples à lire pour moi.&lt;/p&gt;

&lt;p&gt;Avec la satisfaction du devoir accompli, je vous donne la liasse de
feuilles correspondant à mes livres. Vous représentez la vue et vous
devez présenter le tout pour l’afficher à votre client.&lt;/p&gt;

&lt;p&gt;À chaque fiche de livre, vous voyez le numéro de la fiche auteur, mais rien de plus.
Ruby on Rails n’a pas été chercher les auteurs par défaut, sinon quelle serait
la limite ? Aller chercher aussi leurs éditeurs, les commentaires de tous les
emprunteurs sur chacun des livres, l’historique de la bibliothèque ?
Rails n’a pas été chercher tout cela, ce serait faire trop de travail dans votre dos
et vous ne comprendriez pas qu’il soit si lent pour quelques titres de livres.&lt;/p&gt;

&lt;p&gt;Il se trouve que vous avez directement accès au numéro de la bibliothécaire,
et elle va rappeler l’archiviste, car vous lui demandez :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais avoir le nom de l’auteur numéro 37.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Brève recherche… Il s’agit de Molière.&lt;/p&gt;

&lt;p&gt;Puis la seconde d’après, on remet la machine en branle pour demander :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais avoir le nom de l’auteur numéro 81.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cette fois c’est Edmond Rostand.&lt;/p&gt;

&lt;p&gt;Et ainsi de suite… pas très efficace.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Que fait alors cette jointure ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La jointure est le simple moyen de demander à l’archiviste :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais avoir la liste des livres et de leurs auteurs respectifs.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il travaillera un tout petit peu plus, mais c’est son métier et il est
très efficace. De plus, on évite le surcoût dû aux nombreux appels :
composer, attendre au bout du fil que l’archiviste réponde à la bibliothécaire…&lt;/p&gt;

&lt;p&gt;Sans compter les politesses “bonjour, merci, au revoir” qui ne sont
d’ailleurs pas très différentes de la manière dont se déroule le
protocole de communication entre votre code et votre base de données.&lt;/p&gt;

&lt;p&gt;Quand l’archiviste a fini son travail, il me donnera une liasse
un peu plus épaisse, avec les fiches des auteurs incluses.
Lorsque je vous donne la liasse, vous avez absolument tout ce qu’il vous
faut pour travailler, vous ne rappelez même pas la bibliothécaire,
et tout le monde est content de travailler efficacement en respectant
l’architecture prévue, à savoir que moi seul le contrôleur devrait pouvoir
appeler le modèle.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et voilà !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La leçon est de faire comme dans la vraie vie :
restez clair et courtois, n’oubliez pas les jointures,
et n’embêtez personne avec des dizaines de coups de fil rapprochés :)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un peu de méta :&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Bien sûr j’accepte les critiques sur cet épisode et les idées pour les
suivants sur twitter : @zen_m4&lt;/p&gt;

&lt;p&gt;Après un épisode 1 technique, un épisode 2 conceptuel, un épisode 3 sur Ruby et Rails,
je vaus peut-être faire un épisode 4 philosophique, et tenter d’alterner sur ces quatre
catégories.&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Aller chercher des infos associées sans jointure c'est comme poser des questions N fois au lieu d&#39;une seule
	</itunes:subtitle>
	<itunes:summary>
	  Aller chercher des infos associées sans jointure c'est comme poser des questions N fois au lieu d&#39;une seule
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/bamboo.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/245854246-zenm4-003-zen-metaphor-requetes-n1.m4a" length="53000" type="audio/mp4" />
	<itunes:duration>8:50</itunes:duration>

        <pubDate>Sun, 07 Feb 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/003/</link>
        <guid isPermaLink="true">http://zenm4.net/003/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Cache</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 2, sur &lt;b&gt;le cache&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Commençons par un adage connu de Phil Karlton :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Il n’y a que deux choses compliquées en informatique : invalider le cache et nommer les choses.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bien utiliser le cache est complexe, mais le concept est simple.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un carnet d’adresses&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Dans le dernier (et premier) épisode sur les listes chaînées,
pour retrouver mon ami Dave, je devais appeler Alice puis Bob puis Carol.
Beaucoup de gens dérangés pour pas grand-chose.&lt;/p&gt;

&lt;p&gt;On peut apporter une solution très simple : garder un carnet d’adresses.
Je note le numéro de Dave, et peut-être même celui de Bob et Carol.&lt;/p&gt;

&lt;p&gt;À chaque fois que je voudrai appeler Dave, je l’aurai directement en
ligne sans déranger personne : je viens d’inventer le cache !&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Le cache est mort, vive le cache !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le problème bien sûr, c’est quand Dave change de numéro : plus moyen de le joindre !&lt;/p&gt;

&lt;p&gt;On peut voir trois problèmes immédiats :
le premier, c’est quand le numéro n’est pas attribué.
Pas de Dave, fin de l’histoire.
Si je n’ai pas d’autre moyen de le contacter, c’est fichu.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Mauvais destinataire&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le deuxième est peut-être pire : le numéro a été réattribué entre temps.
En fonction de votre phrase d’accroche, les conséquences sont variables.&lt;/p&gt;

&lt;p&gt;Si je commence par des familiarités, c’est embarrassant mais pas bien dangereux.
Si j’envoie le numéro de ma carte bleue ou autre donnée sensible, c’est dramatique.&lt;/p&gt;

&lt;p&gt;Imaginons maintenant que j’envoie un SMS à ce numéro, “OK pour ce soir”.
Je supposais que Dave allait réserver des places de cinéma et venir à 20h, personne.
Dommage.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Parenthèse : chez le mauvais destinataire&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Petite digression : imaginons maintenant que la personne d’en face, disons Bernard,
était elle aussi en train d’attendre un SMS de confirmation, et dans sa précipitation
n’a pas vérifié la source du message, et répond “OK”.&lt;/p&gt;

&lt;p&gt;Non seulement j’ai maintenant une grande confiance que Dave sera au cinéma,
et c’est toujours aussi faux, mais en plus Bernard aura fait quelque chose,
disons réserver deux autres places pour un autre film, en pensant que cela
venait d’un autre ami.&lt;/p&gt;

&lt;p&gt;Au moins nous serons deux à avoir l’air bête, mais c’est une piètre consolation.&lt;/p&gt;

&lt;p&gt;La morale de l’histoire, c’est qu’il faut être clair quand on communique :
si les humains peuvent se faire avoir,
les ordinateurs qui sont très bêtes ne risquent pas de faire mieux.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;La chaîne est rompue&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le troisième problème du cache, c’est que la chaîne est rompue.&lt;/p&gt;

&lt;p&gt;Je faisais bien confiance à Alice pour me passer Dave, peut-être que
quelqu’un me demandait à moi le numéro de Dave. Je ne l’appelle pas
à chaque fois que je passe son numéro pour vérifier que c’est encore
le bon : mon cache est corrompu.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expiration du cache&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La solution serait que Dave prévienne quand il change de numéro de téléphone.
Celui qui sait que la donnée a changé, ici Dave, devrait prévenir ceux qui
gardent ses données en cache, ici moi… encore faut-il que Dave sache qui cache.&lt;/p&gt;

&lt;p&gt;Quitte à ne pas savoir, il pourrait demander à ses amis les plus proches
de répandre la nouvelle. C’est peut-être faisable, peut-être pas,
compliqué certainement, mais en tout cas dans l’intervalle
il y a des gens qui ont l’ancien numéro.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Parenthèse : redirect&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Dans la vraie vie, vous pourriez imaginer des parades subtiles : Dave
a un deuxième téléphone qu’il garde sur lui et pendant un temps, Dave
répond aux deux numéros, et rappelle à chacun qu’il faut utiliser le
nouveau numéro, ou met en place un répondeur automatique, voire
plus simplement un renvoi d’appel.&lt;/p&gt;

&lt;p&gt;Voilà, ça n’avait rien à voir avec le cache,
mais vous venez de comprendre les redirections :)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Du cache partout&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous voyez que la recette est simple, l’idée vient facilement à n’importe qui.
On a du cache partout dans notre vie, et dans nos logiciels.&lt;/p&gt;

&lt;p&gt;Dans le cas qui m’intéresse, une appli Web Ruby on Rails, on a du cache à tous les niveaux :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;votre base de données met des requêtes et donnés en cache&lt;/li&gt;
  &lt;li&gt;Rails a plusieurs systèmes de cache (sur ses vues et partials etc)&lt;/li&gt;
  &lt;li&gt;votre serveur applicatif ou serveur web également (a minima sur les fichiers)&lt;/li&gt;
  &lt;li&gt;toute configuration que vous mettez en bonus, par exemple un reverse-proxy comme Varnish dont c’est exactement le job&lt;/li&gt;
  &lt;li&gt;parfois le proxy de votre connexion Internet peut le faire aussi. Imaginons un réseau d’entreprise où tout le monde va sur la page d’un site d’actu : il peut le mettre en cache si c’est le même (en HTTPS il ne le saura pas ; chacun connecté sur son compte, le cache serait abusif aussi ; mais bon vous avez l’idée)&lt;/li&gt;
  &lt;li&gt;et on vous a probablement déjà demandé de “vider le cache de votre navigateur” qui applique lui aussi ce genre de techniques pour ne pas tout re-télécharger à chaque fois !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà, dans un domaine particulier, j’ai pu citer six endroits où l’on met habituellement un cache.&lt;/p&gt;

&lt;p&gt;Le problème est que tous ces caches sont appelés… “le cache”.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Cache de noeuds&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;C’est pourquoi je recommande de “désambiguiser” : utiliser le même nom pour
des choses différentes ? Non merci, faites-vous préciser et précisez-le.&lt;/p&gt;

&lt;p&gt;(À l’opposé, des noms différents pour la même chose, c’est moins dangereux
mais ça peut souvent être un signe d’ambiguïté à lever. Essayez, le pire
qui puisse vous arriver c’est d’apprendre des choses dans l’intervalle !)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et voilà !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous venez de comprendre pourquoi l’invalidation du cache, c’est difficile !&lt;/p&gt;

&lt;p&gt;J’accepte les critiques sur cet épisode et les idées pour les suivants sur twitter : @zen_m4&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Le cache, à tous ses niveaux, c'est comme avoir un carnet d&#39;adresses et pas redemander
	</itunes:subtitle>
	<itunes:summary>
	  Le cache, à tous ses niveaux, c'est comme avoir un carnet d&#39;adresses et pas redemander
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/macha.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/244601628-zenm4-002-zen-metaphor-cache-cache.m4a" length="40500" type="audio/mp4" />
	<itunes:duration>6:45</itunes:duration>

        <pubDate>Sun, 31 Jan 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/002/</link>
        <guid isPermaLink="true">http://zenm4.net/002/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>Liste chaînée</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour ce premier épisode de zenm4 :&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Les listes chaînées&lt;/b&gt;&lt;br /&gt;
Pour cet épisode pilote, parlons d’un point douloureux du langage C.&lt;/p&gt;

&lt;p&gt;Le C a un avantage pédagogique : comme il vous donne à peine assez
d’outils pour travailler, vous êtes obligés de tout faire vous-mêmes
et d’apprendre comment marche ce qu’il y a “en dessous” (système, C, UNIX).&lt;/p&gt;

&lt;p&gt;Lors de l’apprentissage du C, un des premiers blocages que je vois
souvent et qui impressionne les gens est celui de la liste
chaînée. Cela fait appel à des concepts simples mais qui à ce
moment-là de l’apprentissage sont souvent confus : les mélanger, c’est
la catastrophe.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Une variable&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Une variable est une boîte, ou une étiquette.
On y range des choses qu’on récupère plus tard en “rappelant” le nom qu’on avait utilisé.
Quand on y range autre chose, on “oublie”, perd, écrase ce qu’il y avait.&lt;/p&gt;

&lt;p&gt;Dans certains langages, ces boîtes sont typées : on ne peut y mettre
que des couteaux, ou que des fourchettes. Dans d’autres, pas de contraintes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attention : Cette approximation du type est grossière et largement fausse !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un pointeur&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Un pointeur c’est comme un numéro de téléphone. Personne n’a jamais
confondu le numéro avec la personne, alors pourquoi avoir peur dès que
ça parle de code ? En C, avec&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;int valeur = 42;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;int* pointeur = &amp;amp;valeur&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Vous avez le nombre 42 dans &lt;code class=&quot;highlighter-rouge&quot;&gt;valeur&lt;/code&gt;, rangé à l’adresse mémoire
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;valeur&lt;/code&gt;.  Le pointeur &lt;code class=&quot;highlighter-rouge&quot;&gt;pointeur&lt;/code&gt; est le numéro de téléphone, et
&lt;code class=&quot;highlighter-rouge&quot;&gt;*pointeur&lt;/code&gt; son contenu : quand on regarde la valeur de &lt;code class=&quot;highlighter-rouge&quot;&gt;pointeur&lt;/code&gt; on
n’a qu’un numéro, mais quand on regarde &lt;code class=&quot;highlighter-rouge&quot;&gt;*pointeur&lt;/code&gt; on retombe sur le
contenu : &lt;code class=&quot;highlighter-rouge&quot;&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ERRATUM (&lt;a href=&quot;https://twitter.com/vdwxv&quot;&gt;@vdwxv&lt;/a&gt;) :
je dis “chiffre” mais il faut bien sûr comprendre “nombre”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Une liste chaînée&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous souhaitez maintenant contacter Dave. Vous n’avez pas son numéro,
mais vous savez que quelqu’un dans le cercle d’amis l’a. Vous appelez
Alice, qui a le numéro de Bob, qui a celui de Carole, qui a celui de
Dave.&lt;/p&gt;

&lt;p&gt;Vous pouvez maintenant parler à Dave.&lt;/p&gt;

&lt;p&gt;Bien sûr, je ne parle ici que des chaînons. Le principe d’une liste
c’est que vous rangez quelque chose dedans : vous vous préparez alors
à travailler sur une structure qui a une “charge utile”, par exemple
le livre que vous avez prêté, et bien sûr le lien vers la prochaine
personne à qui elle aurait pu prêter votre livre.&lt;/p&gt;

&lt;p&gt;Pour récupérer votre livre, vous allez donc appeler Alice, qui ne l’a
plus car elle l’a prêté à Bob, qui l’a prêté à Carole etc. Au bout
d’un moment, la recherche s’arrête : soit vous trouvez que Dave a le
livre, soit il ne l’a pas mais ne sait plus qui appeler, et la
recherche a échoué.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ces sujets sont-ils complexes ? Pas pires qu’autre chose.&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le langage humain est complexe, et pourtant peu de gens se trompent.
Quand on dit l’Élysée : c’est une adresse, un palais, le siège du
pouvoir exécutif français, le président… on mélange tout cela et
pourtant tout le monde comprend.&lt;/p&gt;

&lt;p&gt;Alors, le code, c’est compliqué ?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Prenez soin de vous, soyez heureux !&lt;/b&gt;&lt;br /&gt;
Et pour vivre heureux, ne faisons plus de C.
Il ne devrait plus y avoir de C dans zenm4.&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Variables, pointeurs, liste chaînée c'est comme contacter quelqu&#39;un par téléphone
	</itunes:subtitle>
	<itunes:summary>
	  Variables, pointeurs, liste chaînée c'est comme contacter quelqu&#39;un par téléphone
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/tree.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/243520005-zenm4-001-zen-metaphor-liste-chainee.m4a" length="32700" type="audio/mp4" />
	<itunes:duration>5:27</itunes:duration>

        <pubDate>Sun, 24 Jan 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/001/</link>
        <guid isPermaLink="true">http://zenm4.net/001/</guid>
        
        <category>meta</category>
      </item>
    
      <item>
        <title>man ZenM4</title>
        <description>&lt;p&gt;Bienvenue à l’épisode zéro de zenm4 !&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qu’est-ce que c’est,&lt;/b&gt; d’où ça vient, où ça va ?&lt;br /&gt;
C’est &lt;b&gt;un podcast court français avec une métaphore par semaine&lt;/b&gt;.&lt;br /&gt;
Avec des thèmes variés autour du code, du développement web et informatique.
Ça ira des listes chaînées aux tris, des jointures SQL au concept de cache,
de la sécurite au déploiement.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ces thèmes sont-ils complexes ? Souvent oui, mais pas forcément.&lt;/b&gt;&lt;br /&gt;
En tout cas, avec suffisamment de billes pour comprendre les enjeux,
les solutions possibles et leurs compromis, on peut raisonner
efficacement sur des sujets complexes, et c’est ce que je veux faire.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;D’où ça vient ?&lt;/b&gt;&lt;br /&gt;
Du langage &lt;a href=&quot;https://www.ruby-lang.org/fr/&quot;&gt;Ruby&lt;/a&gt;, du meetup &lt;a href=&quot;https://rubyparis.org/&quot;&gt;ParisRB&lt;/a&gt;,
de l’initiative &lt;a href=&quot;http://railsgirls.com/&quot;&gt;RailsGirls&lt;/a&gt; hebdomadaire à Paris,
de la lecture de &lt;a href=&quot;http://thecodelesscode.com/case/100?lang=fr&amp;amp;trans=abelards&quot;&gt;The Codeless Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Où ça va ?&lt;/b&gt;&lt;br /&gt;
C’est une expérience, qui se veut SMART : simple, réalisable, limitée dans le temps.
Je veux la lancer avec un effort minimal qui me donnera des compétences et des leçons pour la suite.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Avantages attendus&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;Si ça aide des gens, j’estime que j’aurai réussi.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Avantages possibles&lt;/b&gt;&lt;br /&gt;
Si l’essai se transforme, je serais ravi s’il pouvait poser les bases
pour un podcast un peu plus long (c’est dur de faire court !) de discussions,
si l’on pouvait faire soit intervenir des invités, soit donner le lead et
un podcast dédié aux apprenantes de RailsGirls Paris hedbomadaire.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Risques&lt;/b&gt;&lt;br /&gt;
Si ça rate, les risques de l’initiative sont extrêmement faibles :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;que ça ne dure pas par manque de temps (dommage)&lt;/li&gt;
  &lt;li&gt;que ça ne trouve pas son audience (trop dur, j’ai perdu moins de 10€ de nom de domaine)&lt;/li&gt;
  &lt;li&gt;que le format soit trop complexe pour poster du code (à la voix)&lt;/li&gt;
  &lt;li&gt;que je n’aie pas le temps et la motivation de faire la transcription texte (j’en suis sûr)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il y aura bien sûr des risques si ça marche :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;que ça soit faux (je vais éviter quand même)&lt;/li&gt;
  &lt;li&gt;que ça soit inexact (ça va forcément arriver en simplifiant)&lt;/li&gt;
  &lt;li&gt;que je me fasse troller parce que je n’ai pas parlé de tous les cas (je peux encaisser)&lt;/li&gt;
  &lt;li&gt;que j’aie l’air ridicule avec les leçons de sagesse et le thème Zen (je peux encaisser aussi)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Questions&lt;/b&gt;&lt;br /&gt;
Je suis encore en train de déterminer le format du podcast.&lt;/p&gt;

&lt;p&gt;Ce qui est sûr : une métaphore du jour, et un lien du jour.&lt;/p&gt;

&lt;p&gt;Ce qui est moins sûr :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l’exercice du jour : &lt;em&gt;codez un cellular automaton, un convertisseur, golf, rewriting…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le conseil du jour : &lt;em&gt;soyez en bonne santé, lisez, appellez famille et proches, asseyez-vous correctement, restez curieux…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le koan du jour : &lt;em&gt;(ne sera probablement pas choisi) le dev est-il un un combattant ? un jardinier ? architecte ? rêveur ? négociateur ? écrivain ?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le mot du jour : &lt;em&gt;sérendipité, par exemple&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le mot anglais du jour : &lt;em&gt;(peut-être fusionné avec le mot du jour) restlessness, grit, growth mindset…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;

</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>
	  Zen META-four : qu&#39;est-ce que c&#39;est, où ça va
	</itunes:subtitle>
	<itunes:summary>
	  Zen META-four : qu&#39;est-ce que c&#39;est, où ça va
	</itunes:summary>
	<itunes:image href="http://zenm4.net/img/zenm4_logo.png" />
	<enclosure url="http://feeds.soundcloud.com/stream/242392059-zenm4-000-zen-metaphor-pisode-z-ro.mp3" length="10100" type="audio/mp4" />
	<itunes:duration>11:35</itunes:duration>

        <pubDate>Sun, 17 Jan 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/000/</link>
        <guid isPermaLink="true">http://zenm4.net/000/</guid>
        
        <category>meta</category>
      </item>
    
  </channel>
</rss>
