<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zen M-4 : Zen Metaphor</title>
    <description>Comprendre le dev Web par des métaphores.
</description>
    <link>http://zenm4.net/</link>
    <atom:link href="http://zenm4.net/feed.xml" rel="self" type="application/rss+xml"/>
    <language>fr-fr</language>
    <copyright>&#169; Sylvain Abélard</copyright>
    <itunes:subtitle>Chaque semaine une image simple pour comprendre quelque chose qui n&#39;aurait jamais dû être compliqué dans le développement informatique.</itunes:subtitle>
    <itunes:author>Sylvain Abélard</itunes:author>
    <itunes:summary>Chaque semaine une image simple pour comprendre quelque chose qui n&#39;aurait jamais dû être compliqué dans le développement informatique.</itunes:summary>
    <itunes:owner>
      <itunes:name>Sylvain Abélard</itunes:name>
      <itunes:email>sylvain.abelard+zenm4@gmail.com</itunes:email>
    </itunes:owner>
    <itunes:image href="http://www.zenm4.net/img/zenm4.png" />
    <itunes:category text="Technology">
    <pubDate>Sun, 14 Feb 2016 19:12:57 +0100</pubDate>
    <lastBuildDate>Sun, 14 Feb 2016 19:12:57 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>004. Priorité CSS</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 4 !&lt;/p&gt;

&lt;p&gt;Beaucoup de gens y compris des devs expérimentés ont des soucis de CSS.
Il y a l’attitude défaitiste qui dit que vous n’y arriverez jamais,
il y a l’attitude “pas mon problème” qui refile le bébé à quelqu’un d’autre,
et il y a l’attitude snob qui méprise carrément le problème.
… et bien sûr il y a l’attitude qui consiste à tester, à apprendre, et à livrer de la valeur à ses utilisateurs et ses clients :)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OK, c’est dur&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;C’est vrai que ce n’est pas simple.
De manière générale, HTML et CSS c’est dur.&lt;/p&gt;

&lt;p&gt;Il y a eu des tas de normes qui s’empilent les unes sur les autres,
mais le vrai souci était la variété des navigateurs qui ne gèraient
pas tout pareil.&lt;/p&gt;

&lt;p&gt;Ça va un peu mieux et ça va me permettre de ne pas vous parler des
astuces IE6, difficiles à contourner mais qu’on connaissait bien, ou
IE7, un peu mieux a priori mais que finalement on connaissait moins.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pourquoi c’est dur ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;L’intention est louable : on veut séparer la forme et le fond.&lt;/p&gt;

&lt;p&gt;Vous avez un contenu HTML, que j’aime visualiser comme des boîtes dans
des boîtes dans des boîtes… etc.&lt;/p&gt;

&lt;p&gt;On souhaite garder les informations d’affichage à côté pour pouvoir
changer de design sans changer le code, et vice-versa.&lt;/p&gt;

&lt;p&gt;On veut alors ajouter des informations sur ce que représentent ces
boîtes, essentiellement son tag, sa classe, et son identifiant.&lt;/p&gt;

&lt;p&gt;À partir de tout cela, vous faites un autre fichier, une CSS pour
Cascading Style Sheets, Feuille de Style qui s’appliquent en Cascade
(pour une fois qu’on a un nom explicite !) qui contient une liste de
règles, des directives CSS.&lt;/p&gt;

&lt;p&gt;Elles sont toutes à prendre en compte, mais pas aussi séquentiellement
que du code où il y a un ordre précis, mais plutôt “toutes ensembles”.&lt;/p&gt;

&lt;p&gt;C’est comme si tout le monde venait parler en même temps dans une conversation !&lt;/p&gt;

&lt;p&gt;Du coup la moindre règle modifie les autres, ce que l’on appelle des
“effets de bord”, et c’est exactement ce qu’on essaie d’éviter de
faire quand on code.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Comment faire du sens dans ce bruit ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Dans la vraie vie, quand vous avez des gens qui parlent ensemble,
quand vous avez plusieurs consignes au travail qui semblent en conflit,
vous rangez aussi par priorités.&lt;/p&gt;

&lt;p&gt;Imaginez : on vous dit un jour de traiter tous les dossiers d’une
certaine manière, mais s’ils sont bleus d’une autre.
On vous dit que si un dossier traîne depuis trop longtemps, il est prioritaire.
Que si le client est VIP, c’est prioritaire.
Que si le patron le veut de suite, c’est ultra prioritaire.&lt;/p&gt;

&lt;p&gt;Qu’est-ce que vous faites ? Comme tout le monde : quand tout est
prioritaire, rien n’est prioritaire, et vous tentez de retrouver un
ordre décent dans tout cela.&lt;/p&gt;

&lt;p&gt;(D’ailleurs petite parenthèse : c’est pour cela que je refuse
d’utiliser la directive CSS &lt;code&gt;!important&lt;/code&gt; et que je ne la recommande pas.)&lt;/p&gt;

&lt;p&gt;On s’arrête, on réfléchit, et on décide qu’on traitera le dossier du
patron en premier, puis les VIP, puis les anciens, puis les dossiers
normaux, qui passent en bas de la pile.&lt;/p&gt;

&lt;p&gt;La règle de priorisation CSS marche pareil : qui le dit, quand est-ce
qu’on le dit, mais surtout à propos de quoi on le dit.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qui parle quand ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Certaines pages Web n’ont pas d’information CSS.
Elles sont très rares, mais il y a bien une information qui existe :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;quand vous écrivez une page HTML pure avec des titres H1 et H2, ils sont grands et en gras&lt;/li&gt;
  &lt;li&gt;quand vous mettez une liste OL ou UL, ses éléments sont en retrait et avec un chiffre ou une puce&lt;/li&gt;
  &lt;li&gt;quand vous utilisez une balise P pour paragraphe, il y a un espace vide autour (padding)&lt;/li&gt;
  &lt;li&gt;les liens non visités sont bleus, les visités sont violets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On voit qu’il existe une CSS par défaut du navigateur, mais c’est la moins importante de toutes.&lt;/p&gt;

&lt;p&gt;Ensuite, vous pouvez utiliser des CSS que vous importez via @import, link, ou dans le header,
ou en ouvrant des balises &lt;style&gt; dans le corps de la page (mais ce n&#39;est pas propre)
C&#39;est le deuxième niveau de priorité. Au sein de ce même niveau de priorité, celui qui parle
le dernier a raison.&lt;/style&gt;&lt;/p&gt;

&lt;p&gt;Enfin, vous pouvez utiliser le style “inline” (écrit directement dans
le HTML sur l’attribut style de l’élément, mais ce n’est vraiment pas
propre) : c’est le dernier à parler, il est exactement là où vous
voulez l’appliquer, on considère que c’est celui qui écrase tout le
reste et qui aura raison au final.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qui parle de quoi ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On a cinq manière d’identifier des éléments HTML, cinq sélecteurs
disponibles dans nos règles CSS :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l’élément, ou le tag, c’est le type de boîte HTML (DIV par exemple)&lt;/li&gt;
  &lt;li&gt;la classe, précédée par un point, quelque chose que vous pouvez ajouter pour noter la
similarité entre plusieurs éléments (sur mes dossiers, la couleur
rouge ou bleu, écrit au marqueur ou au stylo, le fait que ce soit un
client VIP…)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;l’identifiant, précédé par un dièse, quand le dossier est nommé (le cas de Mr Tartempion)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;des pseudo-sélecteurs, avec des symboles “deux points”&lt;/li&gt;
  &lt;li&gt;et des sélecteurs par attributs (avec des crochets) depuis CSS3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous utilisez ces deux derniers vous savez un peu comment ça
marche, alors je vais me concentrer sur les bases : élément, classe,
identifiant.  En plus, on peut les enchaîner : tous les dossiers bleus
à condition qu’ils soient dans une armoire, voire expressément les
dossiers bleus dans une armoire bleue.&lt;/p&gt;

&lt;p&gt;L’élément vaut un point : &lt;code&gt;UL LI A&lt;/code&gt; vaut alors trois points.
Une classe vaut dix points : &lt;code&gt;UL.menu&lt;/code&gt; ou &lt;code&gt;.menu LI&lt;/code&gt; valent onze points.
L’identifiant vaut cent points.&lt;/p&gt;

&lt;p&gt;On donne ainsi une “prime à la précision” : plus le sélecteur est précis,
plus votre règle monte en priorité, et plus c’est elle qui aura raison.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qui dit quoi ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Enfin, on sait de quoi vous parler, mais il faut savoir quoi faire dessus.
Vous listez des propriétés CSS que vous voulez appliquer.&lt;/p&gt;

&lt;p&gt;Certaines s’appliqueront à tous ses enfants (toutes les boîtes dans
cette boîte), d’autres non.  Et tout finit par s’appliquer en même
temps ! Dans la vraie vie, un humain l’oublierait probablement, mais
pas un ordinateur : si une règle très peu prioritaire dit d’écrire en vert
et toutes les règles plus prioritaires ne changent que la taille et les bordures
de l’élément, le texte est toujours vert.&lt;/p&gt;

&lt;p&gt;Si vous voulez changer cela, vous allez réécrire cette propriété plus
tard, prendre la précédence sur ce qui a été dit avant.&lt;/p&gt;

&lt;p&gt;On dit que le droit est le métier des exceptions, mais le
développement aussi : je vous demande de faire un certain traitement,
sauf dans tel cas, mais sauf dans tel cas encore plus précis, auquel
cas on réécrit encore par dessus les deux règles moins importantes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Boni&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On vient de voir que c’est un sujet complexe. Il y a de plus en plus
d’outils pour vous aider, c’est bien, et de pratiques à apprendre, ce
qui peut porter à confusion et ajoute à la complexité ambiante. Je
voulais garder l’épisode “low-tech” pour ne perdre personne et parce
que je crois qu’il y a de la valeur dans les bases et l’historique.&lt;/p&gt;

&lt;p&gt;J’avais parlé d’un épisode philosophique, l’écriture n’est pas venue
aussi naturellement que je pensais, je le garde au chaud pour plus tard.
De même j’hésite à faire des épisodes business, ce qui sort clairement
de la ligne annoncée mais qui a également beaucoup de valeur.&lt;/p&gt;

&lt;p&gt;De plus, à mon sens, on ne peut se contenter de faire son job,
il y a toujours de vastes considérations à prendre en compte autour
de votre périmètre précis, que ce soit pour progresser, pour maximiser
les opportunités, ou pour deviner ce qui va vous tomber dessus et
anticiper un peu.&lt;/p&gt;

&lt;p&gt;Bref, n’hésitez pas, je suis ouvert aux commentaires sur Twitter @zen_m4 :)&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>004. Priorité CSS</itunes:subtitle>
	<itunes:summary>004. Priorité CSS</itunes:summary>
	<itunes:image href="http://www.zenm4.net/img/zenm4.png" />
	<!-- <enclosure url="http://zenm4.net" length="10000" type="audio/mpeg" />
	<itunes:duration></itunes:duration> -->

        <pubDate>Sun, 14 Feb 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/meta/2016/02/14/004.html</link>
        <guid isPermaLink="true">http://zenm4.net/meta/2016/02/14/004.html</guid>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>003. Les requêtes N+1</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 3, plus proche de mon quotidien de Rubyiste,
sur un oubli classique dans Rails &lt;b&gt;les requêtes N+1&lt;/b&gt;, un des premiers
symptômes à vérifier quand votre application est trop lente.&lt;/p&gt;

&lt;p&gt;Je n’aime lâcher personne dans un domaine complètement inconnu, on va
commencer par une introduction superficielle à Rails et ActiveRecord,
merci comme toujours de me pardonner quelques inexactitudes qui ne sont
là que pour éviter la confusion.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ruby on Rails / MVC&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le framework Ruby on Rails a été conçu pour faire des applications Web avec
une architecture MVC, Modèle-Vue-Contrôleur. On ne rentrera pas ici dans les
détails mais vous pourrez trouver de nombreuses ressources sur Internet et
dans les liens de cet épisode :
&lt;a href=&quot;http://www.jeveuxapprendreruby.fr/&quot;&gt;jeveuxapprendreruby.fr&lt;/a&gt;
et mon &lt;a href=&quot;http://maitre-du-monde.fr/web_primer/fr/&quot;&gt;“Web Primer”&lt;/a&gt;,
une vue d’ensemble et liste de vocabulaire sur un grand nombre de concepts
utilisés dans l’architecture Web et la conception MVC.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ActiveRecord et ORM&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Là encore, le but n’est pas de tout détailler. ActiveRecord est à la fois
le nom d’un concept architectural et le nom de son implémentation en Ruby
pour Rails.&lt;/p&gt;

&lt;p&gt;Le principe est que l’on travaille dans un langage objet, Ruby, et que
l’on souhaite travailler avec des données venant d’une base de données
relationnelles.&lt;/p&gt;

&lt;p&gt;Rails a identifié des besoins courants, des choses que les développeurs
résolvent toujours de la même manière, et souhaite donc vous les fournir
directement sans une ligne de code : c’est sa philosophie
“Convention over Configuration”.&lt;/p&gt;

&lt;p&gt;Cette couche logicielle s’appelle ORM “Object-Relational Mapping”, c’est
à dire correspondance Objet - Relationnel. Elle a des avantages bien sûr,
mais aussi évidemment des défauts, dont celui de cacher les difficultés.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Quel piège ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Il est extrêmement simple en Ruby on Rails de créer des pages de référentiel,
et par exemple une liste d’Auteurs et une liste de Livres. Quand on affiche
la liste des Livres, on souhaite probablement afficher dans une colonne le
nom de l’auteur, et que ce soit un lien vers la fiche détaillée de l’auteur.&lt;/p&gt;

&lt;p&gt;Votre modèle fait quelques lignes (déclaration des champs et associations),
votre vue est un HTML avec des balises pour exécuter du code Rails, qui se
base sur la présence d’une variable @livres correctement remplie.&lt;/p&gt;

&lt;p&gt;Ne reste plus que votre contrôleur qui doit savoir comment faire le pont entre
les deux. Il faut aller chercher tous les livres en base de données.
Le code Rails est très simple :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@livres = Livre.all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dans une application réelle bien sûr, on a davantage de contraintes comme
de faire de la pagination : si vous avez plus d’une centaine de livres,
il est inutile et lourd de tout mettre sur une page et on proposera de les
voir par pages de 20 à 100 livres à la fois.&lt;/p&gt;

&lt;p&gt;Cependant, on s’expose au problème N+1 : à chaque ligne de votre Vue,
on a un objet livre duquel on voudrait connaître l’auteur. Rails va
alors faire la requête. Au lieu d’avoir fait 1 requête, vous en faites N.&lt;/p&gt;

&lt;p&gt;Si l’on savait que l’on aurait besoin des Auteurs, on peut le demander
directement à la base de données via une jointure, qui se code ainsi :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@livres = Livre.joins(:auteur)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et la métaphore ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Si ce sujet semble obscur, voici ce que ferait votre première version
de code : moi, le contrôleur, dois appeler au téléphone une bibliothécaire,
le modèle, qui s’occupera de parler avec son archiviste, la base de donnés,
qui est gardien de toutes les données dans sa bibliothèque.&lt;/p&gt;

&lt;p&gt;Chaque connexion à la base de donnée est une coup de fil différent.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais la liste de tous les livres.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;L’archiviste compile sa liste, présente à la bibliothécaire un paquet
de fiches, et comme je ne suis pas très doué avec leur jargon relationnel,
le modèle me convertit tout cela en un tableau d’objets Ruby : on peut
se dire que c’est un classeur de fiches qui sont simples à lire pour moi.&lt;/p&gt;

&lt;p&gt;Avec la satisfaction du devoir accompli, je vous donne la liasse de
feuilles correspondant à mes livres. Vous représentez la vue et vous
devez présenter le tout pour l’afficher à votre client.&lt;/p&gt;

&lt;p&gt;À chaque fiche de livre, vous voyez le numéro de la fiche auteur, mais rien de plus.
Ruby on Rails n’a pas été chercher les auteurs par défaut, sinon quelle serait
la limite ? Aller chercher aussi leurs éditeurs, les commentaires de tous les
emprunteurs sur chacun des livres, l’historique de la bibliothèque ?
Rails n’a pas été chercher tout cela, ce serait faire trop de travail dans votre dos
et vous ne comprendriez pas qu’il soit si lent pour quelques titres de livres.&lt;/p&gt;

&lt;p&gt;Il se trouve que vous avez directement accès au numéro de la bibliothécaire,
et elle va rappeler l’archiviste, car vous lui demandez :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais avoir le nom de l’auteur numéro 37.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Brève recherche… Il s’agit de Molière.&lt;/p&gt;

&lt;p&gt;Puis la seconde d’après, on remet la machine en branle pour demander :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais avoir le nom de l’auteur numéro 81.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cette fois c’est Edmond Rostand.&lt;/p&gt;

&lt;p&gt;Et ainsi de suite… pas très efficace.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Que fait alors cette jointure ?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La jointure est le simple moyen de demander à l’archiviste :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Bonjour, je souhaiterais avoir la liste des livres et de leurs auteurs respectifs.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il travaillera un tout petit peu plus, mais c’est son métier et il est
très efficace. De plus, on évite le surcoût dû aux nombreux appels :
composer, attendre au bout du fil que l’archiviste réponde à la bibliothécaire…&lt;/p&gt;

&lt;p&gt;Sans compter les politesses “bonjour, merci, au revoir” qui ne sont
d’ailleurs pas très différentes de la manière dont se déroule le
protocole de communication entre votre code et votre base de données.&lt;/p&gt;

&lt;p&gt;Quand l’archiviste a fini son travail, il me donnera une liasse
un peu plus épaisse, avec les fiches des auteurs incluses.
Lorsque je vous donne la liasse, vous avez absolument tout ce qu’il vous
faut pour travailler, vous ne rappelez même pas la bibliothécaire,
et tout le monde est content de travailler efficacement en respectant
l’architecture prévue, à savoir que moi seul le contrôleur devrait pouvoir
appeler le modèle.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et voilà !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La leçon est de faire comme dans la vraie vie :
restez clair et courtois, n’oubliez pas les jointures,
et n’embêtez personne avec des dizaines de coups de fil rapprochés :)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un peu de méta :&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Bien sûr j’accepte les critiques sur cet épisode et les idées pour les
suivants sur twitter : @zen_m4&lt;/p&gt;

&lt;p&gt;Après un épisode 1 technique, un épisode 2 conceptuel, un épisode 3 sur Ruby et Rails,
je vaus peut-être faire un épisode 4 philosophique, et tenter d’alterner sur ces quatre
catégories.&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>003. Les requêtes N+1</itunes:subtitle>
	<itunes:summary>003. Les requêtes N+1</itunes:summary>
	<itunes:image href="http://www.zenm4.net/img/zenm4.png" />
	<!-- <enclosure url="http://zenm4.net" length="10000" type="audio/mpeg" />
	<itunes:duration></itunes:duration> -->

        <pubDate>Sun, 07 Feb 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/meta/2016/02/07/003.html</link>
        <guid isPermaLink="true">http://zenm4.net/meta/2016/02/07/003.html</guid>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>002. Cache-Cache</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour l’épisode 2, sur &lt;b&gt;le cache&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Commençons par un adage connu de Phil Karlton :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Il n’y a que deux choses compliquées en informatique : invalider le cache et nommer les choses.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bien utiliser le cache est complexe, mais le concept est simple.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un carnet d’adresses&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Dans le dernier (et premier) épisode sur les listes chaînées,
pour retrouver mon ami Dave, je devais appeler Alice puis Bob puis Carol.
Beaucoup de gens dérangés pour pas grand-chose.&lt;/p&gt;

&lt;p&gt;On peut apporter une solution très simple : garder un carnet d’adresses.
Je note le numéro de Dave, et peut-être même celui de Bob et Carol.&lt;/p&gt;

&lt;p&gt;À chaque fois que je voudrai appeler Dave, je l’aurai directement en
ligne sans déranger personne : je viens d’inventer le cache !&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Le cache est mort, vive le cache !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le problème bien sûr, c’est quand Dave change de numéro : plus moyen de le joindre !&lt;/p&gt;

&lt;p&gt;On peut voir trois problèmes immédiats :
le premier, c’est quand le numéro n’est pas attribué.
Pas de Dave, fin de l’histoire.
Si je n’ai pas d’autre moyen de le contacter, c’est fichu.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Mauvais destinataire&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le deuxième est peut-être pire : le numéro a été réattribué entre temps.
En fonction de votre phrase d’accroche, les conséquences sont variables.&lt;/p&gt;

&lt;p&gt;Si je commence par des familiarités, c’est embarrassant mais pas bien dangereux.
Si j’envoie le numéro de ma carte bleue ou autre donnée sensible, c’est dramatique.&lt;/p&gt;

&lt;p&gt;Imaginons maintenant que j’envoie un SMS à ce numéro, “OK pour ce soir”.
Je supposais que Dave allait réserver des places de cinéma et venir à 20h, personne.
Dommage.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Parenthèse : chez le mauvais destinataire&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Petite digression : imaginons maintenant que la personne d’en face, disons Bernard,
était elle aussi en train d’attendre un SMS de confirmation, et dans sa précipitation
n’a pas vérifié la source du message, et répond “OK”.&lt;/p&gt;

&lt;p&gt;Non seulement j’ai maintenant une grande confiance que Dave sera au cinéma,
et c’est toujours aussi faux, mais en plus Bernard aura fait quelque chose,
disons réserver deux autres places pour un autre film, en pensant que cela
venait d’un autre ami.&lt;/p&gt;

&lt;p&gt;Au moins nous serons deux à avoir l’air bête, mais c’est une piètre consolation.&lt;/p&gt;

&lt;p&gt;La morale de l’histoire, c’est qu’il faut être clair quand on communique :
si les humains peuvent se faire avoir,
les ordinateurs qui sont très bêtes ne risquent pas de faire mieux.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;La chaîne est rompue&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le troisième problème du cache, c’est que la chaîne est rompue.&lt;/p&gt;

&lt;p&gt;Je faisais bien confiance à Alice pour me passer Dave, peut-être que
quelqu’un me demandait à moi le numéro de Dave. Je ne l’appelle pas
à chaque fois que je passe son numéro pour vérifier que c’est encore
le bon : mon cache est corrompu.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expiration du cache&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;La solution serait que Dave prévienne quand il change de numéro de téléphone.
Celui qui sait que la donnée a changé, ici Dave, devrait prévenir ceux qui
gardent ses données en cache, ici moi… encore faut-il que Dave sache qui cache.&lt;/p&gt;

&lt;p&gt;Quitte à ne pas savoir, il pourrait demander à ses amis les plus proches
de répandre la nouvelle. C’est peut-être faisable, peut-être pas,
compliqué certainement, mais en tout cas dans l’intervalle
il y a des gens qui ont l’ancien numéro.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Parenthèse : redirect&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Dans la vraie vie, vous pourriez imaginer des parades subtiles : Dave
a un deuxième téléphone qu’il garde sur lui et pendant un temps, Dave
répond aux deux numéros, et rappelle à chacun qu’il faut utiliser le
nouveau numéro, ou met en place un répondeur automatique, voire
plus simplement un renvoi d’appel.&lt;/p&gt;

&lt;p&gt;Voilà, ça n’avait rien à voir avec le cache,
mais vous venez de comprendre les redirections :)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Du cache partout&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous voyez que la recette est simple, l’idée vient facilement à n’importe qui.
On a du cache partout dans notre vie, et dans nos logiciels.&lt;/p&gt;

&lt;p&gt;Dans le cas qui m’intéresse, une appli Web Ruby on Rails, on a du cache à tous les niveaux :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;votre base de données met des requêtes et donnés en cache&lt;/li&gt;
  &lt;li&gt;Rails a plusieurs systèmes de cache (sur ses vues et partials etc)&lt;/li&gt;
  &lt;li&gt;votre serveur applicatif ou serveur web également (a minima sur les fichiers)&lt;/li&gt;
  &lt;li&gt;toute configuration que vous mettez en bonus, par exemple un reverse-proxy comme Varnish dont c’est exactement le job&lt;/li&gt;
  &lt;li&gt;parfois le proxy de votre connexion Internet peut le faire aussi. Imaginons un réseau d’entreprise où tout le monde va sur la page d’un site d’actu : il peut le mettre en cache si c’est le même (en HTTPS il ne le saura pas ; chacun connecté sur son compte, le cache serait abusif aussi ; mais bon vous avez l’idée)&lt;/li&gt;
  &lt;li&gt;et on vous a probablement déjà demandé de “vider le cache de votre navigateur” qui applique lui aussi ce genre de techniques pour ne pas tout re-télécharger à chaque fois !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voilà, dans un domaine particulier, j’ai pu citer six endroits où l’on met habituellement un cache.&lt;/p&gt;

&lt;p&gt;Le problème est que tous ces caches sont appelés… “le cache”.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Cache de noeuds&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;C’est pourquoi je recommande de “désambiguiser” : utiliser le même nom pour
des choses différentes ? Non merci, faites-vous préciser et précisez-le.&lt;/p&gt;

&lt;p&gt;(À l’opposé, des noms différents pour la même chose, c’est moins dangereux
mais ça peut souvent être un signe d’ambiguïté à lever. Essayez, le pire
qui puisse vous arriver c’est d’apprendre des choses dans l’intervalle !)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Et voilà !&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous venez de comprendre pourquoi l’invalidation du cache, c’est difficile !&lt;/p&gt;

&lt;p&gt;J’accepte les critiques sur cet épisode et les idées pour les suivants sur twitter : @zen_m4&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>002. Cache-Cache</itunes:subtitle>
	<itunes:summary>002. Cache-Cache</itunes:summary>
	<itunes:image href="http://www.zenm4.net/img/zenm4.png" />
	<!-- <enclosure url="http://zenm4.net" length="10000" type="audio/mpeg" />
	<itunes:duration></itunes:duration> -->

        <pubDate>Sun, 31 Jan 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/meta/2016/01/31/002.html</link>
        <guid isPermaLink="true">http://zenm4.net/meta/2016/01/31/002.html</guid>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>001. Liste chaînée</title>
        <description>&lt;p&gt;Bonjour, bienvenue pour ce premier épisode de zenm4 :&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Les listes chaînées&lt;/b&gt;&lt;br /&gt;
Pour cet épisode pilote, parlons d’un point douloureux du langage C.&lt;/p&gt;

&lt;p&gt;Le C a un avantage pédagogique : comme il vous donne à peine assez
d’outils pour travailler, vous êtes obligés de tout faire vous-mêmes
et d’apprendre comment marche ce qu’il y a “en dessous” (système, C, UNIX).&lt;/p&gt;

&lt;p&gt;Lors de l’apprentissage du C, un des premiers blocages que je vois
souvent et qui impressionne les gens est celui de la liste
chaînée. Cela fait appel à des concepts simples mais qui à ce
moment-là de l’apprentissage sont souvent confus : les mélanger, c’est
la catastrophe.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Une variable&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Une variable est une boîte, ou une étiquette.
On y range des choses qu’on récupère plus tard en “rappelant” le nom qu’on avait utilisé.
Quand on y range autre chose, on “oublie”, perd, écrase ce qu’il y avait.&lt;/p&gt;

&lt;p&gt;Dans certains langages, ces boîtes sont typées : on ne peut y mettre
que des couteaux, ou que des fourchettes. Dans d’autres, pas de contraintes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attention : Cette approximation du type est grossière et largement fausse !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Un pointeur&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Un pointeur c’est comme un numéro de téléphone. Personne n’a jamais
confondu le numéro avec la personne, alors pourquoi avoir peur dès que
ça parle de code ? En C, avec&lt;br /&gt;
&lt;code&gt;int valeur = 42;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;int* pointeur = &amp;amp;valeur&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Vous avez le nombre 42 dans &lt;code&gt;valeur&lt;/code&gt;, rangé à l’adresse mémoire
&lt;code&gt;&amp;amp;valeur&lt;/code&gt;.  Le pointeur &lt;code&gt;pointeur&lt;/code&gt; est le numéro de téléphone, et
&lt;code&gt;*pointeur&lt;/code&gt; son contenu : quand on regarde la valeur de &lt;code&gt;pointeur&lt;/code&gt; on
n’a qu’un numéro, mais quand on regarde &lt;code&gt;*pointeur&lt;/code&gt; on retombe sur le
contenu : &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ERRATUM (&lt;a href=&quot;https://twitter.com/vdwxv&quot;&gt;@vdwxv&lt;/a&gt;) :
je dis “chiffre” mais il faut bien sûr comprendre “nombre”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Une liste chaînée&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Vous souhaitez maintenant contacter Dave. Vous n’avez pas son numéro,
mais vous savez que quelqu’un dans le cercle d’amis l’a. Vous appelez
Alice, qui a le numéro de Bob, qui a celui de Carole, qui a celui de
Dave.&lt;/p&gt;

&lt;p&gt;Vous pouvez maintenant parler à Dave.&lt;/p&gt;

&lt;p&gt;Bien sûr, je ne parle ici que des chaînons. Le principe d’une liste
c’est que vous rangez quelque chose dedans : vous vous préparez alors
à travailler sur une structure qui a une “charge utile”, par exemple
le livre que vous avez prêté, et bien sûr le lien vers la prochaine
personne à qui elle aurait pu prêter votre livre.&lt;/p&gt;

&lt;p&gt;Pour récupérer votre livre, vous allez donc appeler Alice, qui ne l’a
plus car elle l’a prêté à Bob, qui l’a prêté à Carole etc. Au bout
d’un moment, la recherche s’arrête : soit vous trouvez que Dave a le
livre, soit il ne l’a pas mais ne sait plus qui appeler, et la
recherche a échoué.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ces sujets sont-ils complexes ? Pas pires qu’autre chose.&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le langage humain est complexe, et pourtant peu de gens se trompent.
Quand on dit l’Élysée : c’est une adresse, un palais, le siège du
pouvoir exécutif français, le président… on mélange tout cela et
pourtant tout le monde comprend.&lt;/p&gt;

&lt;p&gt;Alors, le code, c’est compliqué ?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Prenez soin de vous, soyez heureux !&lt;/b&gt;&lt;br /&gt;
Et pour vivre heureux, ne faisons plus de C.
Il ne devrait plus y avoir de C dans zenm4.&lt;/p&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;
</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>001. Liste chaînée</itunes:subtitle>
	<itunes:summary>001. Liste chaînée</itunes:summary>
	<itunes:image href="http://www.zenm4.net/img/zenm4.png" />
	<!-- <enclosure url="http://zenm4.net" length="10000" type="audio/mpeg" />
	<itunes:duration></itunes:duration> -->

        <pubDate>Sun, 24 Jan 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/meta/2016/01/24/001.html</link>
        <guid isPermaLink="true">http://zenm4.net/meta/2016/01/24/001.html</guid>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>000. man zenm4</title>
        <description>&lt;p&gt;Bienvenue à l’épisode zéro de zenm4 !&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Qu’est-ce que c’est,&lt;/b&gt; d’où ça vient, où ça va ?&lt;br /&gt;
C’est &lt;b&gt;un podcast court français avec une métaphore par semaine&lt;/b&gt;.&lt;br /&gt;
Avec des thèmes variés autour du code, du développement web et informatique.
Ça ira des listes chaînées aux tris, des jointures SQL au concept de cache,
de la sécurite au déploiement.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Ces thèmes sont-ils complexes ? Souvent oui, mais pas forcément.&lt;/b&gt;&lt;br /&gt;
En tout cas, avec suffisamment de billes pour comprendre les enjeux,
les solutions possibles et leurs compromis, on peut raisonner
efficacement sur des sujets complexes, et c’est ce que je veux faire.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;D’où ça vient ?&lt;/b&gt;&lt;br /&gt;
Du langage &lt;a href=&quot;https://www.ruby-lang.org/fr/&quot;&gt;Ruby&lt;/a&gt;, du meetup &lt;a href=&quot;https://rubyparis.org/&quot;&gt;ParisRB&lt;/a&gt;,
de l’initiative &lt;a href=&quot;http://railsgirls.com/&quot;&gt;RailsGirls&lt;/a&gt; hebdomadaire à Paris,
de la lecture de &lt;a href=&quot;http://thecodelesscode.com/case/100?lang=fr&amp;amp;trans=abelards&quot;&gt;The Codeless Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Où ça va ?&lt;/b&gt;&lt;br /&gt;
C’est une expérience, qui se veut SMART : simple, réalisable, limitée dans le temps.
Je veux la lancer avec un effort minimal qui me donnera des compétences et des leçons pour la suite.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Avantages attendus&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;Si ça aide des gens, j’estime que j’aurai réussi.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Avantages possibles&lt;/b&gt;&lt;br /&gt;
Si l’essai se transforme, je serais ravi s’il pouvait poser les bases
pour un podcast un peu plus long (c’est dur de faire court !) de discussions,
si l’on pouvait faire soit intervenir des invités, soit donner le lead et
un podcast dédié aux apprenantes de RailsGirls Paris hedbomadaire.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Risques&lt;/b&gt;&lt;br /&gt;
Si ça rate, les risques de l’initiative sont extrêmement faibles :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;que ça ne dure pas par manque de temps (dommage)&lt;/li&gt;
  &lt;li&gt;que ça ne trouve pas son audience (trop dur, j’ai perdu moins de 10€ de nom de domaine)&lt;/li&gt;
  &lt;li&gt;que le format soit trop complexe pour poster du code (à la voix)&lt;/li&gt;
  &lt;li&gt;que je n’aie pas le temps et la motivation de faire la transcription texte (j’en suis sûr)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il y aura bien sûr des risques si ça marche :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;que ça soit faux (je vais éviter quand même)&lt;/li&gt;
  &lt;li&gt;que ça soit inexact (ça va forcément arriver en simplifiant)&lt;/li&gt;
  &lt;li&gt;que je me fasse troller parce que je n’ai pas parlé de tous les cas (je peux encaisser)&lt;/li&gt;
  &lt;li&gt;que j’aie l’air ridicule avec les leçons de sagesse et le thème Zen (je peux encaisser aussi)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Questions&lt;/b&gt;&lt;br /&gt;
Je suis encore en train de déterminer le format du podcast.&lt;/p&gt;

&lt;p&gt;Ce qui est sûr : une métaphore du jour, et un lien du jour.&lt;/p&gt;

&lt;p&gt;Ce qui est moins sûr :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l’exercice du jour : &lt;em&gt;codez un cellular automaton, un convertisseur, golf, rewriting…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le conseil du jour : &lt;em&gt;soyez en bonne santé, lisez, appellez famille et proches, asseyez-vous correctement, restez curieux…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le koan du jour : &lt;em&gt;(ne sera probablement pas choisi) le dev est-il un un combattant ? un jardinier ? architecte ? rêveur ? négociateur ? écrivain ?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le mot du jour : &lt;em&gt;sérendipité, par exemple&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le mot anglais du jour : &lt;em&gt;(peut-être fusionné avec le mot du jour) restlessness, grit, growth mindset…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merci et à bientôt !&lt;/p&gt;

</description>
	<itunes:author>Sylvain Abélard</itunes:author>
	<itunes:subtitle>000. man zenm4</itunes:subtitle>
	<itunes:summary>000. man zenm4</itunes:summary>
	<itunes:image href="http://www.zenm4.net/img/zenm4.png" />
	<!-- <enclosure url="http://zenm4.net" length="10000" type="audio/mpeg" />
	<itunes:duration></itunes:duration> -->

        <pubDate>Sun, 17 Jan 2016 15:45:00 +0100</pubDate>
        <link>http://zenm4.net/meta/2016/01/17/000.html</link>
        <guid isPermaLink="true">http://zenm4.net/meta/2016/01/17/000.html</guid>
        
        
        <category>meta</category>
        
      </item>
    
  </channel>
</rss>
